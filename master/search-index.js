var N = null;var searchIndex = {};
searchIndex["debruijn"]={"doc":"debruijn-rs: a De Bruijn graph for DNA seqeunces in Rust.…","items":[[3,"MerIter","debruijn","Iterator over bases of a DNA sequence (bases will be…",N,N],[3,"DnaBytes","","A newtype wrapper around a `Vec<u8>` with implementations ",N,N],[12,"0","","",0,N],[3,"DnaSlice","","A newtype wrapper around a `&[u8]` with implementations ",N,N],[12,"0","","",1,N],[3,"Exts","","Store single-base extensions for a DNA Debruijn graph.",N,N],[12,"val","","",2,N],[3,"KmerIter","","Iterate over the `Kmer`s of a DNA sequence efficiently",N,N],[3,"KmerExtsIter","","Iterate over the `(Kmer, Exts)` tuples of a sequence and…",N,N],[4,"Dir","","Direction of motion in a DeBruijn graph",N,N],[13,"Left","","",3,N],[13,"Right","","",3,N],[5,"bits_to_ascii","","Convert a 2-bit representation of a base to a char",N,[[["u8"]],["u8"]]],[5,"base_to_bits","","Convert an ASCII-encoded DNA base to a 2-bit representation",N,[[["u8"]],["u8"]]],[5,"dna_only_base_to_bits","","",N,[[["u8"]],["option",["u8"]]]],[5,"is_valid_base","","Convert an ASCII-encoded DNA base to a 2-bit representation",N,[[["u8"]],["bool"]]],[5,"bits_to_base","","Convert a 2-bit representation of a base to a char",N,[[["u8"]],["char"]]],[5,"complement","","The complement of a 2-bit encoded base",N,[[["u8"]],["u8"]]],[0,"kmer","","Represent kmers with statically know length in compact…",N,N],[3,"IntKmer","debruijn::kmer","A Kmer sequence with a statically know K. K will fill the…",N,N],[12,"storage","","",4,N],[3,"VarIntKmer","","A fixed-length Kmer sequence that may not fill the bits of T",N,N],[12,"storage","","",5,N],[12,"phantom","","",5,N],[3,"K48","","Marker struct for generating K=48 Kmers",N,N],[3,"K40","","Marker trait for generating K=40 Kmers",N,N],[3,"K30","","Marker trait for generating K=40 Kmers",N,N],[3,"K24","","Marker trait for generating K=24 Kmers",N,N],[3,"K20","","Marker trait for generating K=20 Kmers",N,N],[3,"K14","","Marker trait for generating K=14 Kmers",N,N],[3,"K12","","Marker trait for generating K=12 Kmers",N,N],[3,"K6","","Marker trait for generating K=6 Kmers",N,N],[3,"K5","","Marker trait for generating K=6 Kmers",N,N],[3,"K4","","Marker trait for generating K=6 Kmers",N,N],[3,"K3","","Marker trait for generating K=6 Kmers",N,N],[3,"K2","","Marker trait for generating K=6 Kmers",N,N],[6,"Kmer64","","64-base kmer, backed by a single u128",N,N],[6,"Kmer48","","48-base kmer, backed by a single u128",N,N],[6,"Kmer40","","40-base kmer, backed by a single u128",N,N],[6,"Kmer32","","32-base kmer, backed by a single u64",N,N],[6,"Kmer30","","30-base kmer, backed by a single u64",N,N],[6,"Kmer24","","24-base kmer, backed by a single u64",N,N],[6,"Kmer20","","20-base kmer, backed by a single u64",N,N],[6,"Kmer16","","16-base kmer, backed by a single u32",N,N],[6,"Kmer14","","14-base kmer, backed by a single u32",N,N],[6,"Kmer12","","12-base kmer, backed by a single u32",N,N],[6,"Kmer8","","8-base kmer, backed by a single u16",N,N],[6,"Kmer6","","",N,N],[6,"Kmer5","","",N,N],[6,"Kmer4","","",N,N],[6,"Kmer3","","",N,N],[6,"Kmer2","","",N,N],[8,"IntHelp","","Trait for specialized integer operations used in DeBruijn…",N,N],[10,"reverse_by_twos","","Reverse the order of 2-bit units of the integer",6,[[["self"]],["self"]]],[8,"KmerSize","","Helper trait for declaring the K value of a Kmer. Will be…",N,N],[10,"K","","",7,[[],["usize"]]],[11,"top_mask","","",4,[[["usize"]],["t"]]],[11,"bottom_mask","","",4,[[["usize"]],["t"]]],[11,"top_mask","","",5,[[["usize"]],["t"]]],[11,"bottom_mask","","",5,[[["usize"]],["t"]]],[0,"dna_string","debruijn","A 2-bit encoding of arbitrary length DNA sequences.",N,N],[3,"DnaString","debruijn::dna_string","A container for sequence of DNA bases.",N,N],[3,"DnaStringIter","","Iterator over values of a DnaStringoded sequence (values…",N,N],[3,"DnaStringSlice","","An immutable slice into a DnaString",N,N],[12,"dna_string","","",8,N],[12,"start","","",8,N],[12,"length","","",8,N],[12,"is_rc","","",8,N],[3,"PackedDnaStringSet","","Container for many distinct sequences, concatenated into a…",N,N],[12,"sequence","","",9,N],[12,"start","","",9,N],[12,"length","","",9,N],[11,"new","","Create an empty DNA string",10,[[],["dnastring"]]],[11,"len","","Length of the sequence",10,[[["self"]],["usize"]]],[11,"with_capacity","","Create a new instance with a given capacity.",10,[[["usize"]],["self"]]],[11,"blank","","Create a DnaString of length n initialized to all A's",10,[[["usize"]],["self"]]],[11,"from_dna_string","","Create a DnaString corresponding to an ACGT-encoded str.",10,[[["str"]],["dnastring"]]],[11,"from_dna_only_string","","Create a DnaString corresponding to an ACGT-encoded str.",10,[[["str"]],["vec",["dnastring"]]]],[11,"from_acgt_bytes","","Create a DnaString from an ASCII ACGT-encoded byte slice.…",10,N],[11,"from_acgt_bytes_hashn","","Create a DnaString from an ACGT-encoded byte slice, Non…",10,N],[11,"from_bytes","","Create a DnaString from a 0-4 encoded byte slice",10,N],[11,"to_string","","Convert sequence to a String",10,[[["self"]],["string"]]],[11,"to_bytes","","Convert sequence to a Vector of 0-4 encoded bytes",10,[[["self"]],["vec",["u8"]]]],[11,"to_ascii_vec","","Convert sequence to a Vector of ascii-encoded bytes",10,[[["self"]],["vec",["u8"]]]],[11,"push","","Append a 0-4 encoded base.",10,[[["self"],["u8"]]]],[11,"push_bytes","","Push 0-4 encoded bases from a byte array.",10,[[["self"],["vec"],["usize"]]]],[11,"iter","","Iterate over stored values (values will be unpacked into…",10,[[["self"]],["dnastringiter"]]],[11,"clear","","Clear the sequence.",10,[[["self"]]]],[11,"is_empty","","",10,[[["self"]],["bool"]]],[11,"prefix","","Get the length `k` prefix of the DnaString",10,[[["self"],["usize"]],["dnastringslice"]]],[11,"suffix","","Get the length `k` suffix of the DnaString",10,[[["self"],["usize"]],["dnastringslice"]]],[11,"slice","","Get slice containing the interval [`start`, `end`) of `self`",10,[[["self"],["usize"],["usize"]],["dnastringslice"]]],[11,"reverse","","Create a fresh DnaString containing the reverse of `self`",10,[[["self"]],["dnastring"]]],[11,"is_palindrome","","",8,[[["self"]],["bool"]]],[11,"bytes","","",8,[[["self"]],["vec",["u8"]]]],[11,"ascii","","",8,[[["self"]],["vec",["u8"]]]],[11,"to_dna_string","","",8,[[["self"]],["string"]]],[11,"to_string","","",8,[[["self"]],["string"]]],[11,"to_owned","","",8,[[["self"]],["dnastring"]]],[11,"slice","","Get slice containing the interval [`start`, `end`) of `self`",8,[[["self"],["usize"],["usize"]],["dnastringslice"]]],[11,"new","","Create an empty `PackedDnaStringSet`",9,[[],["self"]]],[11,"get","","Get a `DnaStringSlice` containing `i`th sequence in the set",9,[[["self"],["usize"]],["dnastringslice"]]],[11,"slice","","Get a `DnaStringSlice` containing `i`th sequence in the set",9,[[["self"],["usize"],["usize"],["usize"]],["dnastringslice"]]],[11,"len","","Number of sequences in the set",9,[[["self"]],["usize"]]],[11,"add","","",9,[[["self"],["s"]]]],[0,"graph","debruijn","Containers for path-compressed De Bruijn graphs",N,N],[3,"BaseGraph","debruijn::graph","A compressed DeBruijn graph carrying auxiliary data on…",N,N],[12,"sequences","","",11,N],[12,"exts","","",11,N],[12,"data","","",11,N],[12,"stranded","","",11,N],[3,"DebruijnGraph","","A compressed DeBruijn graph carrying auxiliary data on…",N,N],[12,"base","","",12,N],[3,"NodeIter","","Iterator over nodes in a `DeBruijnGraph`",N,N],[3,"NodeIntoIter","","Iterator over nodes in a `DeBruijnGraph`",N,N],[3,"NodeKmer","","Iterator over nodes in a `DeBruijnGraph`",N,N],[12,"node_id","","",13,N],[3,"NodeKmerIter","","",N,N],[3,"Node","","Unbranched sequence in the DeBruijn graph",N,N],[12,"node_id","","",14,N],[12,"graph","","",14,N],[11,"new","","",11,[[["bool"]],["self"]]],[11,"len","","",11,[[["self"]],["usize"]]],[11,"combine","","",11,[[["i"]],["self"]]],[11,"add","","",11,[[["self"],["s"],["exts"],["d"]]]],[11,"finish","","",11,[[["self"]],["debruijngraph"]]],[11,"finish_serial","","",11,[[["self"]],["debruijngraph"]]],[11,"len","","Total number of nodes in the DeBruijn graph",12,[[["self"]],["usize"]]],[11,"get_node","","Get a node given it's `node_id`",12,[[["self"],["usize"]],["node"]]],[11,"iter_nodes","","Return an iterator over all nodes in the graph",12,[[["self"]],["nodeiter"]]],[11,"find_link","","Find a link in the graph, possibly handling a RC switch.",12,[[["self"],["k"],["dir"]],["option"]]],[11,"is_compressed","","Check whether the graph is fully compressed. Return `None`…",12,[[["self"]],["option"]]],[11,"fix_exts","","Remove non-existent extensions that may be created due to…",12,[[["self"],["option",["bitset"]]]]],[11,"get_valid_exts","","",12,[[["self"],["usize"],["option",["bitset"]]],["exts"]]],[11,"max_path","","Find the highest-scoring, unambiguous path in the graph.…",12,[[["self"],["f"],["f2"]],["vec"]]],[11,"sequence_of_path","","Get the sequence of a path through the graph. The path is…",12,[[["self"],["i"]],["dnastring"]]],[11,"to_dot","","Write the graph to a dot file.",12,[[["self"],["p"],["f"]]]],[11,"to_gfa","","Write the graph to GFA format",12,[[["self"],["p"]],["result",["error"]]]],[11,"to_gfa_with_tags","","Write the graph to GFA format",12,[[["self"],["p"],["f"]],["result",["error"]]]],[11,"to_json_rest","","",12,[[["self"],["f"],["w"],["option",["value"]]]]],[11,"to_json","","Write the graph to JSON",12,[[["self"],["f"],["w"]]]],[11,"print","","Print a text representation of the graph.",12,[[["self"]]]],[11,"print_with_data","","",12,[[["self"]]]],[11,"to_supernova_bv","","",12,[[["self"],["write"]],["result",["error"]]]],[11,"max_path_beam","","",12,[[["self"],["usize"],["f"],["f2"]],["vec"]]],[11,"len","","Length of the sequence of this node",14,[[["self"]],["usize"]]],[11,"sequence","","Sequence of the node",14,[[["self"]],["dnastringslice"]]],[11,"data","","Reference to auxiliarly data associated with the node",14,[[["self"]],["d"]]],[11,"exts","","Extension bases from this node",14,[[["self"]],["exts"]]],[11,"l_edges","","Edges leaving the left side of the node in the format",14,[[["self"]],["smallvec"]]],[11,"r_edges","","Edges leaving the right side of the node in the format",14,[[["self"]],["smallvec"]]],[11,"edges","","Edges leaving the 'dir' side of the node in the format",14,[[["self"],["dir"]],["smallvec"]]],[0,"vmer","debruijn","Variable-length DNA strings packed into fixed-size structs.",N,N],[3,"Lmer","debruijn::vmer","Store a variable-length DNA sequence in a packed 2-bit…",N,N],[6,"Lmer1","","",N,N],[6,"Lmer2","","",N,N],[6,"Lmer3","","",N,N],[8,"Array","","Types that can be used as the backing store for a SmallVec",N,N],[16,"Item","","",15,N],[10,"new","","",15,[[],["self"]]],[10,"size","","",15,[[],["usize"]]],[10,"as_slice","","",15,N],[10,"as_mut_slice","","",15,N],[0,"msp","debruijn","Methods for minimum substring partitioning of a DNA string",N,N],[3,"MspInterval","debruijn::msp","",N,N],[5,"simple_scan","","Determine MSP substrings of seq, for given k and p.…",N,N],[5,"msp_sequence","","",N,N],[11,"new","","",16,[[["u16"],["u32"],["u16"]],["mspinterval"]]],[11,"start","","",16,[[["self"]],["usize"]]],[11,"len","","",16,[[["self"]],["usize"]]],[11,"end","","",16,[[["self"]],["usize"]]],[11,"range","","",16,[[["self"]],["range",["usize"]]]],[11,"bucket","","",16,[[["self"]],["u16"]]],[0,"filter","debruijn","Methods for converting sequences into kmers, filtering…",N,N],[3,"CountFilter","debruijn::filter","A simple KmerSummarizer that only accepts kmers that are…",N,N],[3,"CountFilterSet","","A simple KmerSummarizer that only accepts kmers that are…",N,N],[3,"CountFilterEqClass","","",N,N],[5,"filter_kmers","","Process DNA sequences into kmers and determine the set of…",N,N],[5,"remove_censored_exts_sharded","","Remove extensions in valid_kmers that point to censored…",N,[[["bool"],["vec"],["vec"]]]],[5,"remove_censored_exts","","Remove extensions in valid_kmers that point to censored…",N,[[["bool"],["vec"]]]],[6,"EqClassIdType","","",N,N],[8,"KmerSummarizer","","Implement this trait to control how multiple observations…",N,N],[10,"summarize","","The input `items` is an iterator over kmer observations.…",17,N],[11,"new","","Construct a `CountFilter` KmerSummarizer only accepts…",18,[[["usize"]],["countfilter"]]],[11,"new","","Construct a `CountFilterSet` KmerSummarizer only accepts…",19,[[["usize"]],["countfilterset"]]],[11,"new","","",20,[[["usize"]],["countfiltereqclass"]]],[11,"get_eq_classes","","",20,[[["self"]],["vec",["vec"]]]],[11,"get_number_of_eq_classes","","",20,[[["self"]],["usize"]]],[11,"fetch_add","","",20,[[["self"]],["usize"]]],[0,"compression","debruijn","Create compressed DeBruijn graphs from uncompressed…",N,N],[3,"SimpleCompress","debruijn::compression","Simple implementation of `CompressionSpec` that lets you…",N,N],[3,"ScmapCompress","","",N,N],[5,"compress_graph","","Perform path-compression on a (possibly partially…",N,[[["bool"],["s"],["debruijngraph"],["option",["vec"]]],["debruijngraph"]]],[5,"compress_kmers_with_hash","","Take a BoomHash Object and build a compressed DeBruijn…",N,[[["bool"],["s"],["boomhashmap2"]],["basegraph"]]],[5,"compress_kmers","","Take a BoomHash Object and build a compressed DeBruijn…",N,[[["bool"],["s"],["vec"]],["basegraph"]]],[8,"CompressionSpec","","Customize the path-compression process. Implementing this…",N,N],[10,"reduce","","",21,[[["self"],["d"],["d"]],["d"]]],[10,"join_test","","",21,[[["self"],["d"],["d"]],["bool"]]],[11,"new","","",22,[[["f"]],["simplecompress"]]],[11,"new","","",23,[[],["scmapcompress"]]],[0,"clean_graph","debruijn","DeBruijn graph simplification routines. Currently…",N,N],[3,"CleanGraph","debruijn::clean_graph","",N,N],[11,"new","","",24,[[["t1"]],["cleangraph"]]],[11,"find_bad_nodes","","",24,[[["self"],["debruijngraph"]],["vec",["usize"]]]],[0,"test","debruijn","Generate random genomes (with lots of re-used sustrings),…",N,N],[5,"random_base","debruijn::test","Generate a uniformly random base",N,[[],["u8"]]],[5,"random_dna","","Generate uniformly random DNA sequences",N,[[["usize"]],["vec",["u8"]]]],[5,"edit_dna","","Randomly mutate each base with probability `p`",N,[[["vec"],["f64"],["r"]]]],[5,"random_kmer","","",N,[[],["k"]]],[5,"random_vmer","","",N,[[],["v"]]],[5,"simple_random_contigs","","",N,[[],["vec",["vec"]]]],[5,"random_contigs","","",N,[[],["vec",["vec"]]]],[8,"Mer","debruijn","Trait for interacting with DNA sequences",N,N],[10,"len","","Length of DNA sequence",25,[[["self"]],["usize"]]],[10,"get","","Get 2-bit encoded base at position `pos`",25,[[["self"],["usize"]],["u8"]]],[10,"set_mut","","Set base at `pos` to 2-bit encoded base `val`",25,[[["self"],["usize"],["u8"]]]],[10,"set_slice_mut","","Set `nbases` positions in the sequence, starting at `pos`.…",25,[[["self"],["usize"],["usize"],["u64"]]]],[10,"rc","","Return a new object containing the reverse complement of…",25,[[["self"]],["self"]]],[11,"iter","","Iterate over the bases in the sequence",25,[[["self"]],["meriter"]]],[8,"Kmer","","Encapsulates a Kmer sequence with statically known K.",N,N],[10,"empty","","Create a Kmer initialized to all A's",26,[[],["self"]]],[10,"k","","K value for this concrete type.",26,[[],["usize"]]],[10,"to_u64","","Return the rank of this kmer in an lexicographic ordering…",26,[[["self"]],["u64"]]],[10,"from_u64","","",26,[[["u64"]],["self"]]],[10,"extend_left","","Add the base `v` to the left side of the sequence, and…",26,[[["self"],["u8"]],["self"]]],[10,"extend_right","","Add the base `v` to the right side of the sequence, and…",26,[[["self"],["u8"]],["self"]]],[11,"extend","","Add the base `v` to the side of sequence given by `dir`,…",26,[[["self"],["u8"],["dir"]],["self"]]],[11,"get_extensions","","Generate all the extension of this sequence given by…",26,[[["self"],["exts"],["dir"]],["vec"]]],[11,"min_rc_flip","","Return the minimum of the kmer and it's reverse…",26,N],[11,"min_rc","","",26,[[["self"]],["self"]]],[11,"is_palindrome","","Test if this Kmer and it's reverse complement are the same",26,[[["self"]],["bool"]]],[11,"from_bytes","","Create a Kmer from the first K bytes of `bytes`, which…",26,N],[11,"from_ascii","","Create a Kmer from the first K bytes of `bytes`, which…",26,N],[11,"to_string","","Return String containing Kmer sequence",26,[[["self"]],["string"]]],[11,"kmers_from_bytes","","Generate vector of all kmers contained in `str` encoded as…",26,N],[11,"kmers_from_ascii","","Generate vector of all kmers contained in `str`, encoded…",26,N],[8,"MerImmut","","An immutable interface to a Mer sequence.",N,N],[11,"set","","",27,[[["self"],["usize"],["u8"]],["self"]]],[11,"set_slice","","",27,[[["self"],["usize"],["usize"],["u64"]],["self"]]],[8,"Vmer","","A DNA sequence with run-time variable length, up to a…",N,N],[10,"new","","Create a new sequence with length `len`, initialized to…",28,[[["usize"]],["self"]]],[10,"max_len","","Maximum sequence length that can be stored in this type",28,[[],["usize"]]],[11,"from_slice","","Create a Vmer from a sequence of bytes",28,N],[10,"get_kmer","","Efficiently extract a Kmer from the sequence",28,[[["self"],["usize"]],["k"]]],[11,"first_kmer","","Get the first Kmer from the sequence",28,[[["self"]],["k"]]],[11,"last_kmer","","Get the last kmer in the sequence",28,[[["self"]],["k"]]],[11,"both_term_kmer","","Get the terminal kmer of the sequence, on the both side of…",28,N],[11,"term_kmer","","Get the terminal kmer of the sequence, on the side of the…",28,[[["self"],["dir"]],["k"]]],[11,"iter_kmers","","Iterate over the kmers in the sequence",28,[[["self"]],["kmeriter"]]],[11,"iter_kmer_exts","","Iterate over the kmers and their extensions, given the…",28,[[["self"],["exts"]],["kmerextsiter"]]],[11,"flip","","Return a fresh Dir with the opposite direction",3,[[["self"]],["dir"]]],[11,"cond_flip","","Return a fresh Dir opposite direction if do_flip == True",3,[[["self"],["bool"]],["dir"]]],[11,"pick","","Pick between two alternatives, depending on the direction",3,[[["self"],["t"],["t"]],["t"]]],[11,"new","","",2,[[["u8"]],["self"]]],[11,"empty","","",2,[[],["exts"]]],[11,"from_single_dirs","","",2,[[["exts"],["exts"]],["exts"]]],[11,"merge","","",2,[[["exts"],["exts"]],["exts"]]],[11,"add","","",2,[[["self"],["exts"]],["exts"]]],[11,"set","","",2,[[["self"],["dir"],["u8"]],["exts"]]],[11,"get","","",2,[[["self"],["dir"]],["vec",["u8"]]]],[11,"has_ext","","",2,[[["self"],["dir"],["u8"]],["bool"]]],[11,"from_slice_bounds","","",2,N],[11,"from_dna_string","","",2,[[["dnastring"],["usize"],["usize"]],["exts"]]],[11,"num_exts_l","","",2,[[["self"]],["u8"]]],[11,"num_exts_r","","",2,[[["self"]],["u8"]]],[11,"num_ext_dir","","",2,[[["self"],["dir"]],["u8"]]],[11,"mk_left","","",2,[[["u8"]],["exts"]]],[11,"mk_right","","",2,[[["u8"]],["exts"]]],[11,"mk","","",2,[[["u8"],["u8"]],["exts"]]],[11,"get_unique_extension","","",2,[[["self"],["dir"]],["option",["u8"]]]],[11,"single_dir","","",2,[[["self"],["dir"]],["exts"]]],[11,"complement","","Complement the extension bases for each direction",2,[[["self"]],["exts"]]],[11,"reverse","","",2,[[["self"]],["exts"]]],[11,"rc","","",2,[[["self"]],["exts"]]],[11,"into_iter","","",29,[[["self"]],["i"]]],[11,"from","","",29,[[["t"]],["t"]]],[11,"into","","",29,[[["self"]],["u"]]],[11,"try_from","","",29,[[["u"]],["result"]]],[11,"borrow","","",29,[[["self"]],["t"]]],[11,"borrow_mut","","",29,[[["self"]],["t"]]],[11,"try_into","","",29,[[["self"]],["result"]]],[11,"get_type_id","","",29,[[["self"]],["typeid"]]],[11,"par_bridge","","",29,[[["self"]],["iterbridge"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,N],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"into_iter","","",30,[[["self"]],["i"]]],[11,"from","","",30,[[["t"]],["t"]]],[11,"into","","",30,[[["self"]],["u"]]],[11,"try_from","","",30,[[["u"]],["result"]]],[11,"borrow","","",30,[[["self"]],["t"]]],[11,"borrow_mut","","",30,[[["self"]],["t"]]],[11,"try_into","","",30,[[["self"]],["result"]]],[11,"get_type_id","","",30,[[["self"]],["typeid"]]],[11,"par_bridge","","",30,[[["self"]],["iterbridge"]]],[11,"into_iter","","",31,[[["self"]],["i"]]],[11,"from","","",31,[[["t"]],["t"]]],[11,"into","","",31,[[["self"]],["u"]]],[11,"try_from","","",31,[[["u"]],["result"]]],[11,"borrow","","",31,[[["self"]],["t"]]],[11,"borrow_mut","","",31,[[["self"]],["t"]]],[11,"try_into","","",31,[[["self"]],["result"]]],[11,"get_type_id","","",31,[[["self"]],["typeid"]]],[11,"par_bridge","","",31,[[["self"]],["iterbridge"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,N],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"from","debruijn::kmer","",4,[[["t"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,N],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,N],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"from","","",32,[[["t"]],["t"]]],[11,"into","","",32,[[["self"]],["u"]]],[11,"to_owned","","",32,[[["self"]],["t"]]],[11,"clone_into","","",32,N],[11,"try_from","","",32,[[["u"]],["result"]]],[11,"borrow","","",32,[[["self"]],["t"]]],[11,"borrow_mut","","",32,[[["self"]],["t"]]],[11,"try_into","","",32,[[["self"]],["result"]]],[11,"get_type_id","","",32,[[["self"]],["typeid"]]],[11,"from","","",33,[[["t"]],["t"]]],[11,"into","","",33,[[["self"]],["u"]]],[11,"to_owned","","",33,[[["self"]],["t"]]],[11,"clone_into","","",33,N],[11,"try_from","","",33,[[["u"]],["result"]]],[11,"borrow","","",33,[[["self"]],["t"]]],[11,"borrow_mut","","",33,[[["self"]],["t"]]],[11,"try_into","","",33,[[["self"]],["result"]]],[11,"get_type_id","","",33,[[["self"]],["typeid"]]],[11,"from","","",34,[[["t"]],["t"]]],[11,"into","","",34,[[["self"]],["u"]]],[11,"to_owned","","",34,[[["self"]],["t"]]],[11,"clone_into","","",34,N],[11,"try_from","","",34,[[["u"]],["result"]]],[11,"borrow","","",34,[[["self"]],["t"]]],[11,"borrow_mut","","",34,[[["self"]],["t"]]],[11,"try_into","","",34,[[["self"]],["result"]]],[11,"get_type_id","","",34,[[["self"]],["typeid"]]],[11,"from","","",35,[[["t"]],["t"]]],[11,"into","","",35,[[["self"]],["u"]]],[11,"to_owned","","",35,[[["self"]],["t"]]],[11,"clone_into","","",35,N],[11,"try_from","","",35,[[["u"]],["result"]]],[11,"borrow","","",35,[[["self"]],["t"]]],[11,"borrow_mut","","",35,[[["self"]],["t"]]],[11,"try_into","","",35,[[["self"]],["result"]]],[11,"get_type_id","","",35,[[["self"]],["typeid"]]],[11,"from","","",36,[[["t"]],["t"]]],[11,"into","","",36,[[["self"]],["u"]]],[11,"to_owned","","",36,[[["self"]],["t"]]],[11,"clone_into","","",36,N],[11,"try_from","","",36,[[["u"]],["result"]]],[11,"borrow","","",36,[[["self"]],["t"]]],[11,"borrow_mut","","",36,[[["self"]],["t"]]],[11,"try_into","","",36,[[["self"]],["result"]]],[11,"get_type_id","","",36,[[["self"]],["typeid"]]],[11,"from","","",37,[[["t"]],["t"]]],[11,"into","","",37,[[["self"]],["u"]]],[11,"to_owned","","",37,[[["self"]],["t"]]],[11,"clone_into","","",37,N],[11,"try_from","","",37,[[["u"]],["result"]]],[11,"borrow","","",37,[[["self"]],["t"]]],[11,"borrow_mut","","",37,[[["self"]],["t"]]],[11,"try_into","","",37,[[["self"]],["result"]]],[11,"get_type_id","","",37,[[["self"]],["typeid"]]],[11,"from","","",38,[[["t"]],["t"]]],[11,"into","","",38,[[["self"]],["u"]]],[11,"to_owned","","",38,[[["self"]],["t"]]],[11,"clone_into","","",38,N],[11,"try_from","","",38,[[["u"]],["result"]]],[11,"borrow","","",38,[[["self"]],["t"]]],[11,"borrow_mut","","",38,[[["self"]],["t"]]],[11,"try_into","","",38,[[["self"]],["result"]]],[11,"get_type_id","","",38,[[["self"]],["typeid"]]],[11,"from","","",39,[[["t"]],["t"]]],[11,"into","","",39,[[["self"]],["u"]]],[11,"to_owned","","",39,[[["self"]],["t"]]],[11,"clone_into","","",39,N],[11,"try_from","","",39,[[["u"]],["result"]]],[11,"borrow","","",39,[[["self"]],["t"]]],[11,"borrow_mut","","",39,[[["self"]],["t"]]],[11,"try_into","","",39,[[["self"]],["result"]]],[11,"get_type_id","","",39,[[["self"]],["typeid"]]],[11,"from","","",40,[[["t"]],["t"]]],[11,"into","","",40,[[["self"]],["u"]]],[11,"to_owned","","",40,[[["self"]],["t"]]],[11,"clone_into","","",40,N],[11,"try_from","","",40,[[["u"]],["result"]]],[11,"borrow","","",40,[[["self"]],["t"]]],[11,"borrow_mut","","",40,[[["self"]],["t"]]],[11,"try_into","","",40,[[["self"]],["result"]]],[11,"get_type_id","","",40,[[["self"]],["typeid"]]],[11,"from","","",41,[[["t"]],["t"]]],[11,"into","","",41,[[["self"]],["u"]]],[11,"to_owned","","",41,[[["self"]],["t"]]],[11,"clone_into","","",41,N],[11,"try_from","","",41,[[["u"]],["result"]]],[11,"borrow","","",41,[[["self"]],["t"]]],[11,"borrow_mut","","",41,[[["self"]],["t"]]],[11,"try_into","","",41,[[["self"]],["result"]]],[11,"get_type_id","","",41,[[["self"]],["typeid"]]],[11,"from","","",42,[[["t"]],["t"]]],[11,"into","","",42,[[["self"]],["u"]]],[11,"to_owned","","",42,[[["self"]],["t"]]],[11,"clone_into","","",42,N],[11,"try_from","","",42,[[["u"]],["result"]]],[11,"borrow","","",42,[[["self"]],["t"]]],[11,"borrow_mut","","",42,[[["self"]],["t"]]],[11,"try_into","","",42,[[["self"]],["result"]]],[11,"get_type_id","","",42,[[["self"]],["typeid"]]],[11,"from","","",43,[[["t"]],["t"]]],[11,"into","","",43,[[["self"]],["u"]]],[11,"to_owned","","",43,[[["self"]],["t"]]],[11,"clone_into","","",43,N],[11,"try_from","","",43,[[["u"]],["result"]]],[11,"borrow","","",43,[[["self"]],["t"]]],[11,"borrow_mut","","",43,[[["self"]],["t"]]],[11,"try_into","","",43,[[["self"]],["result"]]],[11,"get_type_id","","",43,[[["self"]],["typeid"]]],[11,"from","debruijn::dna_string","",10,[[["t"]],["t"]]],[11,"into","","",10,[[["self"]],["u"]]],[11,"to_owned","","",10,[[["self"]],["t"]]],[11,"clone_into","","",10,N],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"try_into","","",10,[[["self"]],["result"]]],[11,"get_type_id","","",10,[[["self"]],["typeid"]]],[11,"into_iter","","",44,[[["self"]],["i"]]],[11,"from","","",44,[[["t"]],["t"]]],[11,"into","","",44,[[["self"]],["u"]]],[11,"try_from","","",44,[[["u"]],["result"]]],[11,"borrow","","",44,[[["self"]],["t"]]],[11,"borrow_mut","","",44,[[["self"]],["t"]]],[11,"try_into","","",44,[[["self"]],["result"]]],[11,"get_type_id","","",44,[[["self"]],["typeid"]]],[11,"par_bridge","","",44,[[["self"]],["iterbridge"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"into","","",8,[[["self"]],["u"]]],[11,"to_owned","","",8,[[["self"]],["t"]]],[11,"clone_into","","",8,N],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"into","","",9,[[["self"]],["u"]]],[11,"to_owned","","",9,[[["self"]],["t"]]],[11,"clone_into","","",9,N],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"try_into","","",9,[[["self"]],["result"]]],[11,"get_type_id","","",9,[[["self"]],["typeid"]]],[11,"from","debruijn::graph","",11,[[["t"]],["t"]]],[11,"into","","",11,[[["self"]],["u"]]],[11,"to_owned","","",11,[[["self"]],["t"]]],[11,"clone_into","","",11,N],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"try_into","","",11,[[["self"]],["result"]]],[11,"get_type_id","","",11,[[["self"]],["typeid"]]],[11,"from","","",12,[[["t"]],["t"]]],[11,"into","","",12,[[["self"]],["u"]]],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"try_into","","",12,[[["self"]],["result"]]],[11,"get_type_id","","",12,[[["self"]],["typeid"]]],[11,"into_iter","","",45,[[["self"]],["i"]]],[11,"from","","",45,[[["t"]],["t"]]],[11,"into","","",45,[[["self"]],["u"]]],[11,"try_from","","",45,[[["u"]],["result"]]],[11,"borrow","","",45,[[["self"]],["t"]]],[11,"borrow_mut","","",45,[[["self"]],["t"]]],[11,"try_into","","",45,[[["self"]],["result"]]],[11,"get_type_id","","",45,[[["self"]],["typeid"]]],[11,"par_bridge","","",45,[[["self"]],["iterbridge"]]],[11,"into_iter","","",46,[[["self"]],["i"]]],[11,"from","","",46,[[["t"]],["t"]]],[11,"into","","",46,[[["self"]],["u"]]],[11,"try_from","","",46,[[["u"]],["result"]]],[11,"borrow","","",46,[[["self"]],["t"]]],[11,"borrow_mut","","",46,[[["self"]],["t"]]],[11,"try_into","","",46,[[["self"]],["result"]]],[11,"get_type_id","","",46,[[["self"]],["typeid"]]],[11,"par_bridge","","",46,[[["self"]],["iterbridge"]]],[11,"into_iter","","",13,[[["self"]],["i"]]],[11,"from","","",13,[[["t"]],["t"]]],[11,"into","","",13,[[["self"]],["u"]]],[11,"to_owned","","",13,[[["self"]],["t"]]],[11,"clone_into","","",13,N],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"try_into","","",13,[[["self"]],["result"]]],[11,"get_type_id","","",13,[[["self"]],["typeid"]]],[11,"into_iter","","",47,[[["self"]],["i"]]],[11,"from","","",47,[[["t"]],["t"]]],[11,"into","","",47,[[["self"]],["u"]]],[11,"try_from","","",47,[[["u"]],["result"]]],[11,"borrow","","",47,[[["self"]],["t"]]],[11,"borrow_mut","","",47,[[["self"]],["t"]]],[11,"try_into","","",47,[[["self"]],["result"]]],[11,"get_type_id","","",47,[[["self"]],["typeid"]]],[11,"par_bridge","","",47,[[["self"]],["iterbridge"]]],[11,"from","","",14,[[["t"]],["t"]]],[11,"into","","",14,[[["self"]],["u"]]],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"try_into","","",14,[[["self"]],["result"]]],[11,"get_type_id","","",14,[[["self"]],["typeid"]]],[11,"from","debruijn::vmer","",48,[[["t"]],["t"]]],[11,"into","","",48,[[["self"]],["u"]]],[11,"to_owned","","",48,[[["self"]],["t"]]],[11,"clone_into","","",48,N],[11,"try_from","","",48,[[["u"]],["result"]]],[11,"borrow","","",48,[[["self"]],["t"]]],[11,"borrow_mut","","",48,[[["self"]],["t"]]],[11,"try_into","","",48,[[["self"]],["result"]]],[11,"get_type_id","","",48,[[["self"]],["typeid"]]],[11,"from","debruijn::msp","",16,[[["t"]],["t"]]],[11,"into","","",16,[[["self"]],["u"]]],[11,"try_from","","",16,[[["u"]],["result"]]],[11,"borrow","","",16,[[["self"]],["t"]]],[11,"borrow_mut","","",16,[[["self"]],["t"]]],[11,"try_into","","",16,[[["self"]],["result"]]],[11,"get_type_id","","",16,[[["self"]],["typeid"]]],[11,"from","debruijn::filter","",18,[[["t"]],["t"]]],[11,"into","","",18,[[["self"]],["u"]]],[11,"try_from","","",18,[[["u"]],["result"]]],[11,"borrow","","",18,[[["self"]],["t"]]],[11,"borrow_mut","","",18,[[["self"]],["t"]]],[11,"try_into","","",18,[[["self"]],["result"]]],[11,"get_type_id","","",18,[[["self"]],["typeid"]]],[11,"from","","",19,[[["t"]],["t"]]],[11,"into","","",19,[[["self"]],["u"]]],[11,"try_from","","",19,[[["u"]],["result"]]],[11,"borrow","","",19,[[["self"]],["t"]]],[11,"borrow_mut","","",19,[[["self"]],["t"]]],[11,"try_into","","",19,[[["self"]],["result"]]],[11,"get_type_id","","",19,[[["self"]],["typeid"]]],[11,"from","","",20,[[["t"]],["t"]]],[11,"into","","",20,[[["self"]],["u"]]],[11,"try_from","","",20,[[["u"]],["result"]]],[11,"borrow","","",20,[[["self"]],["t"]]],[11,"borrow_mut","","",20,[[["self"]],["t"]]],[11,"try_into","","",20,[[["self"]],["result"]]],[11,"get_type_id","","",20,[[["self"]],["typeid"]]],[11,"from","debruijn::compression","",22,[[["t"]],["t"]]],[11,"into","","",22,[[["self"]],["u"]]],[11,"try_from","","",22,[[["u"]],["result"]]],[11,"borrow","","",22,[[["self"]],["t"]]],[11,"borrow_mut","","",22,[[["self"]],["t"]]],[11,"try_into","","",22,[[["self"]],["result"]]],[11,"get_type_id","","",22,[[["self"]],["typeid"]]],[11,"from","","",23,[[["t"]],["t"]]],[11,"into","","",23,[[["self"]],["u"]]],[11,"try_from","","",23,[[["u"]],["result"]]],[11,"borrow","","",23,[[["self"]],["t"]]],[11,"borrow_mut","","",23,[[["self"]],["t"]]],[11,"try_into","","",23,[[["self"]],["result"]]],[11,"get_type_id","","",23,[[["self"]],["typeid"]]],[11,"from","debruijn::clean_graph","",24,[[["t"]],["t"]]],[11,"into","","",24,[[["self"]],["u"]]],[11,"try_from","","",24,[[["u"]],["result"]]],[11,"borrow","","",24,[[["self"]],["t"]]],[11,"borrow_mut","","",24,[[["self"]],["t"]]],[11,"try_into","","",24,[[["self"]],["result"]]],[11,"get_type_id","","",24,[[["self"]],["typeid"]]],[11,"K","debruijn::kmer","",32,[[],["usize"]]],[11,"K","","",33,[[],["usize"]]],[11,"K","","",34,[[],["usize"]]],[11,"K","","",35,[[],["usize"]]],[11,"K","","",36,[[],["usize"]]],[11,"K","","",37,[[],["usize"]]],[11,"K","","",38,[[],["usize"]]],[11,"K","","",39,[[],["usize"]]],[11,"K","","",40,[[],["usize"]]],[11,"K","","",41,[[],["usize"]]],[11,"K","","",42,[[],["usize"]]],[11,"K","","",43,[[],["usize"]]],[11,"summarize","debruijn::filter","",18,N],[11,"summarize","","",19,N],[11,"summarize","","",20,N],[11,"reduce","debruijn::compression","",22,[[["self"],["d"],["d"]],["d"]]],[11,"join_test","","",22,[[["self"],["d"],["d"]],["bool"]]],[11,"reduce","","",23,[[["self"],["d"],["d"]],["d"]]],[11,"join_test","","",23,[[["self"],["d"],["d"]],["bool"]]],[11,"len","debruijn::kmer","",4,[[["self"]],["usize"]]],[11,"get","","Get the letter at the given position.",4,[[["self"],["usize"]],["u8"]]],[11,"set_mut","","",4,[[["self"],["usize"],["u8"]]]],[11,"set_slice_mut","","Set a slice of bases in the kmer, using the packed…",4,[[["self"],["usize"],["usize"],["u64"]]]],[11,"rc","","Return the reverse complement of this kmer",4,[[["self"]],["self"]]],[11,"len","","",5,[[["self"]],["usize"]]],[11,"get","","Get the letter at the given position.",5,[[["self"],["usize"]],["u8"]]],[11,"set_mut","","",5,[[["self"],["usize"],["u8"]]]],[11,"set_slice_mut","","Set a slice of bases in the kmer, using the packed…",5,[[["self"],["usize"],["usize"],["u64"]]]],[11,"rc","","Return the reverse complement of this kmer",5,[[["self"]],["self"]]],[11,"len","debruijn::dna_string","",10,[[["self"]],["usize"]]],[11,"get","","Get the value at position `i`.",10,[[["self"],["usize"]],["u8"]]],[11,"set_mut","","Set the value as position `i`.",10,[[["self"],["usize"],["u8"]]]],[11,"set_slice_mut","","",10,[[["self"],["usize"],["usize"],["u64"]]]],[11,"rc","","",10,[[["self"]],["dnastring"]]],[11,"len","","",8,[[["self"]],["usize"]]],[11,"get","","Get the base at position `i`.",8,[[["self"],["usize"]],["u8"]]],[11,"set_mut","","Set the base as position `i`.",8,[[["self"],["usize"],["u8"]]]],[11,"set_slice_mut","","",8,[[["self"],["usize"],["usize"],["u64"]]]],[11,"rc","","",8,[[["self"]],["dnastringslice"]]],[11,"len","debruijn::vmer","The length of the DNA string",48,[[["self"]],["usize"]]],[11,"get","","Get the base at position pos",48,[[["self"],["usize"]],["u8"]]],[11,"set_mut","","Return a new Lmer with position pos set to base val",48,[[["self"],["usize"],["u8"]]]],[11,"set_slice_mut","","",48,[[["self"],["usize"],["usize"],["u64"]]]],[11,"rc","","",48,[[["self"]],["self"]]],[11,"len","debruijn","",0,[[["self"]],["usize"]]],[11,"get","","",0,[[["self"],["usize"]],["u8"]]],[11,"set_mut","","Set base at `pos` to 2-bit encoded base `val`",0,[[["self"],["usize"],["u8"]]]],[11,"set_slice_mut","","Set `nbases` positions in the sequence, starting at `pos`.…",0,[[["self"],["usize"],["usize"],["u64"]]]],[11,"rc","","Return a new object containing the reverse complement of…",0,[[["self"]],["self"]]],[11,"len","","",1,[[["self"]],["usize"]]],[11,"get","","",1,[[["self"],["usize"]],["u8"]]],[11,"set_mut","","Set base at `pos` to 2-bit encoded base `val`",1,[[["self"],["usize"],["u8"]]]],[11,"set_slice_mut","","Set `nbases` positions in the sequence, starting at `pos`.…",1,[[["self"],["usize"],["usize"],["u64"]]]],[11,"rc","","Return a new object containing the reverse complement of…",1,[[["self"]],["self"]]],[11,"empty","debruijn::kmer","",4,[[],["self"]]],[11,"k","","",4,[[],["usize"]]],[11,"from_u64","","",4,[[["u64"]],["intkmer"]]],[11,"to_u64","","",4,[[["self"]],["u64"]]],[11,"extend_left","","Shift the base v into the left end of the kmer",4,[[["self"],["u8"]],["self"]]],[11,"extend_right","","",4,[[["self"],["u8"]],["self"]]],[11,"empty","","",5,[[],["self"]]],[11,"k","","",5,[[],["usize"]]],[11,"to_u64","","",5,[[["self"]],["u64"]]],[11,"from_u64","","",5,[[["u64"]],["self"]]],[11,"extend_left","","Shift the base v into the left end of the kmer",5,[[["self"],["u8"]],["self"]]],[11,"extend_right","","",5,[[["self"],["u8"]],["self"]]],[11,"new","debruijn::dna_string","",10,[[["usize"]],["self"]]],[11,"max_len","","",10,[[],["usize"]]],[11,"get_kmer","","Get the kmer starting at position pos",10,[[["self"],["usize"]],["k"]]],[11,"new","","",8,[[["usize"]],["self"]]],[11,"max_len","","",8,[[],["usize"]]],[11,"get_kmer","","Get the kmer starting at position pos",8,[[["self"],["usize"]],["k"]]],[11,"max_len","debruijn::vmer","",48,[[],["usize"]]],[11,"new","","Initialize an blank Lmer of length len. Will initially…",48,[[["usize"]],["lmer"]]],[11,"get_kmer","","Get the kmer starting at position pos",48,[[["self"],["usize"]],["k"]]],[11,"new","debruijn","Create a new sequence with length `len`, initialized to…",0,[[["usize"]],["self"]]],[11,"max_len","","Maximum sequence length that can be stored in this type",0,[[],["usize"]]],[11,"get_kmer","","Efficiently extract a Kmer from the sequence",0,[[["self"],["usize"]],["k"]]],[11,"new","","Create a new sequence with length `len`, initialized to…",1,[[["usize"]],["self"]]],[11,"max_len","","Maximum sequence length that can be stored in this type",1,[[],["usize"]]],[11,"get_kmer","","Efficiently extract a Kmer from the sequence",1,[[["self"],["usize"]],["k"]]],[11,"next","debruijn::dna_string","",44,[[["self"]],["option",["u8"]]]],[11,"next","debruijn::graph","",45,[[["self"]],["option",["node"]]]],[11,"next","","",46,[[["self"]],["option"]]],[11,"next","","",47,[[["self"]],["option"]]],[11,"size_hint","","",47,N],[11,"nth","","Provide a 'fast-forward' capability for this iterator MPHF…",47,[[["self"],["usize"]],["option"]]],[11,"next","debruijn","",29,[[["self"]],["option",["u8"]]]],[11,"next","","",30,[[["self"]],["option"]]],[11,"next","","",31,[[["self"]],["option"]]],[11,"eq","debruijn::kmer","",4,[[["self"],["intkmer"]],["bool"]]],[11,"ne","","",4,[[["self"],["intkmer"]],["bool"]]],[11,"eq","","",5,[[["self"],["varintkmer"]],["bool"]]],[11,"ne","","",5,[[["self"],["varintkmer"]],["bool"]]],[11,"eq","","",32,[[["self"],["k48"]],["bool"]]],[11,"eq","","",33,[[["self"],["k40"]],["bool"]]],[11,"eq","","",34,[[["self"],["k30"]],["bool"]]],[11,"eq","","",35,[[["self"],["k24"]],["bool"]]],[11,"eq","","",36,[[["self"],["k20"]],["bool"]]],[11,"eq","","",37,[[["self"],["k14"]],["bool"]]],[11,"eq","","",38,[[["self"],["k12"]],["bool"]]],[11,"eq","","",39,[[["self"],["k6"]],["bool"]]],[11,"eq","","",40,[[["self"],["k5"]],["bool"]]],[11,"eq","","",41,[[["self"],["k4"]],["bool"]]],[11,"eq","","",42,[[["self"],["k3"]],["bool"]]],[11,"eq","","",43,[[["self"],["k2"]],["bool"]]],[11,"eq","debruijn::dna_string","",10,[[["self"],["dnastring"]],["bool"]]],[11,"ne","","",10,[[["self"],["dnastring"]],["bool"]]],[11,"eq","","",8,[[["self"],["dnastringslice"]],["bool"]]],[11,"eq","debruijn::vmer","",48,[[["self"],["lmer"]],["bool"]]],[11,"ne","","",48,[[["self"],["lmer"]],["bool"]]],[11,"eq","debruijn","",0,[[["self"],["dnabytes"]],["bool"]]],[11,"ne","","",0,[[["self"],["dnabytes"]],["bool"]]],[11,"eq","","",1,[[["self"],["dnaslice"]],["bool"]]],[11,"ne","","",1,[[["self"],["dnaslice"]],["bool"]]],[11,"eq","","",2,[[["self"],["exts"]],["bool"]]],[11,"ne","","",2,[[["self"],["exts"]],["bool"]]],[11,"into_iter","debruijn::graph","",13,N],[11,"cmp","debruijn::kmer","",4,[[["self"],["intkmer"]],["ordering"]]],[11,"cmp","","",5,[[["self"],["varintkmer"]],["ordering"]]],[11,"cmp","","",32,[[["self"],["k48"]],["ordering"]]],[11,"cmp","","",33,[[["self"],["k40"]],["ordering"]]],[11,"cmp","","",34,[[["self"],["k30"]],["ordering"]]],[11,"cmp","","",35,[[["self"],["k24"]],["ordering"]]],[11,"cmp","","",36,[[["self"],["k20"]],["ordering"]]],[11,"cmp","","",37,[[["self"],["k14"]],["ordering"]]],[11,"cmp","","",38,[[["self"],["k12"]],["ordering"]]],[11,"cmp","","",39,[[["self"],["k6"]],["ordering"]]],[11,"cmp","","",40,[[["self"],["k5"]],["ordering"]]],[11,"cmp","","",41,[[["self"],["k4"]],["ordering"]]],[11,"cmp","","",42,[[["self"],["k3"]],["ordering"]]],[11,"cmp","","",43,[[["self"],["k2"]],["ordering"]]],[11,"cmp","debruijn::dna_string","",10,[[["self"],["dnastring"]],["ordering"]]],[11,"cmp","debruijn::vmer","",48,[[["self"],["lmer"]],["ordering"]]],[11,"cmp","debruijn","",0,[[["self"],["dnabytes"]],["ordering"]]],[11,"cmp","","",1,[[["self"],["dnaslice"]],["ordering"]]],[11,"cmp","","",2,[[["self"],["exts"]],["ordering"]]],[11,"clone","debruijn::kmer","",4,[[["self"]],["intkmer"]]],[11,"clone","","",5,[[["self"]],["varintkmer"]]],[11,"clone","","",32,[[["self"]],["k48"]]],[11,"clone","","",33,[[["self"]],["k40"]]],[11,"clone","","",34,[[["self"]],["k30"]]],[11,"clone","","",35,[[["self"]],["k24"]]],[11,"clone","","",36,[[["self"]],["k20"]]],[11,"clone","","",37,[[["self"]],["k14"]]],[11,"clone","","",38,[[["self"]],["k12"]]],[11,"clone","","",39,[[["self"]],["k6"]]],[11,"clone","","",40,[[["self"]],["k5"]]],[11,"clone","","",41,[[["self"]],["k4"]]],[11,"clone","","",42,[[["self"]],["k3"]]],[11,"clone","","",43,[[["self"]],["k2"]]],[11,"clone","debruijn::dna_string","",10,[[["self"]],["dnastring"]]],[11,"clone","","",8,[[["self"]],["dnastringslice"]]],[11,"clone","","",9,[[["self"]],["packeddnastringset"]]],[11,"clone","debruijn::graph","",11,[[["self"]],["basegraph"]]],[11,"clone","","",13,[[["self"]],["nodekmer"]]],[11,"clone","debruijn::vmer","",48,[[["self"]],["lmer"]]],[11,"clone","debruijn","",0,[[["self"]],["dnabytes"]]],[11,"clone","","",3,[[["self"]],["dir"]]],[11,"clone","","",2,[[["self"]],["exts"]]],[11,"partial_cmp","debruijn::kmer","",4,[[["self"],["intkmer"]],["option",["ordering"]]]],[11,"lt","","",4,[[["self"],["intkmer"]],["bool"]]],[11,"le","","",4,[[["self"],["intkmer"]],["bool"]]],[11,"gt","","",4,[[["self"],["intkmer"]],["bool"]]],[11,"ge","","",4,[[["self"],["intkmer"]],["bool"]]],[11,"partial_cmp","","",5,[[["self"],["varintkmer"]],["option",["ordering"]]]],[11,"lt","","",5,[[["self"],["varintkmer"]],["bool"]]],[11,"le","","",5,[[["self"],["varintkmer"]],["bool"]]],[11,"gt","","",5,[[["self"],["varintkmer"]],["bool"]]],[11,"ge","","",5,[[["self"],["varintkmer"]],["bool"]]],[11,"partial_cmp","","",32,[[["self"],["k48"]],["option",["ordering"]]]],[11,"partial_cmp","","",33,[[["self"],["k40"]],["option",["ordering"]]]],[11,"partial_cmp","","",34,[[["self"],["k30"]],["option",["ordering"]]]],[11,"partial_cmp","","",35,[[["self"],["k24"]],["option",["ordering"]]]],[11,"partial_cmp","","",36,[[["self"],["k20"]],["option",["ordering"]]]],[11,"partial_cmp","","",37,[[["self"],["k14"]],["option",["ordering"]]]],[11,"partial_cmp","","",38,[[["self"],["k12"]],["option",["ordering"]]]],[11,"partial_cmp","","",39,[[["self"],["k6"]],["option",["ordering"]]]],[11,"partial_cmp","","",40,[[["self"],["k5"]],["option",["ordering"]]]],[11,"partial_cmp","","",41,[[["self"],["k4"]],["option",["ordering"]]]],[11,"partial_cmp","","",42,[[["self"],["k3"]],["option",["ordering"]]]],[11,"partial_cmp","","",43,[[["self"],["k2"]],["option",["ordering"]]]],[11,"partial_cmp","debruijn::dna_string","",10,[[["self"],["dnastring"]],["option",["ordering"]]]],[11,"lt","","",10,[[["self"],["dnastring"]],["bool"]]],[11,"le","","",10,[[["self"],["dnastring"]],["bool"]]],[11,"gt","","",10,[[["self"],["dnastring"]],["bool"]]],[11,"ge","","",10,[[["self"],["dnastring"]],["bool"]]],[11,"partial_cmp","debruijn::vmer","",48,[[["self"],["lmer"]],["option",["ordering"]]]],[11,"lt","","",48,[[["self"],["lmer"]],["bool"]]],[11,"le","","",48,[[["self"],["lmer"]],["bool"]]],[11,"gt","","",48,[[["self"],["lmer"]],["bool"]]],[11,"ge","","",48,[[["self"],["lmer"]],["bool"]]],[11,"partial_cmp","debruijn","",0,[[["self"],["dnabytes"]],["option",["ordering"]]]],[11,"lt","","",0,[[["self"],["dnabytes"]],["bool"]]],[11,"le","","",0,[[["self"],["dnabytes"]],["bool"]]],[11,"gt","","",0,[[["self"],["dnabytes"]],["bool"]]],[11,"ge","","",0,[[["self"],["dnabytes"]],["bool"]]],[11,"partial_cmp","","",1,[[["self"],["dnaslice"]],["option",["ordering"]]]],[11,"lt","","",1,[[["self"],["dnaslice"]],["bool"]]],[11,"le","","",1,[[["self"],["dnaslice"]],["bool"]]],[11,"gt","","",1,[[["self"],["dnaslice"]],["bool"]]],[11,"ge","","",1,[[["self"],["dnaslice"]],["bool"]]],[11,"partial_cmp","","",2,[[["self"],["exts"]],["option",["ordering"]]]],[11,"lt","","",2,[[["self"],["exts"]],["bool"]]],[11,"le","","",2,[[["self"],["exts"]],["bool"]]],[11,"gt","","",2,[[["self"],["exts"]],["bool"]]],[11,"ge","","",2,[[["self"],["exts"]],["bool"]]],[11,"fmt","debruijn::kmer","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",32,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",33,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",34,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",35,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",36,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",37,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",38,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",39,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",40,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",41,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",42,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",43,[[["self"],["formatter"]],["result"]]],[11,"fmt","debruijn::dna_string","",10,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"fmt","debruijn::graph","",11,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",14,[[["self"],["formatter"]],["result"]]],[11,"fmt","debruijn::vmer","",48,[[["self"],["formatter"]],["result"]]],[11,"fmt","debruijn::msp","",16,[[["self"],["formatter"]],["result"]]],[11,"fmt","debruijn","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"hash","debruijn::kmer","",4,N],[11,"hash","","",5,N],[11,"hash","","",32,N],[11,"hash","","",33,N],[11,"hash","","",34,N],[11,"hash","","",35,N],[11,"hash","","",36,N],[11,"hash","","",37,N],[11,"hash","","",38,N],[11,"hash","","",39,N],[11,"hash","","",40,N],[11,"hash","","",41,N],[11,"hash","","",42,N],[11,"hash","","",43,N],[11,"hash","debruijn::dna_string","",10,N],[11,"hash","debruijn::vmer","",48,N],[11,"hash","debruijn","",2,N],[11,"serialize","debruijn::kmer","",4,[[["self"],["__s"]],["result"]]],[11,"serialize","","",5,[[["self"],["__s"]],["result"]]],[11,"serialize","debruijn::dna_string","",10,[[["self"],["__s"]],["result"]]],[11,"serialize","","",9,[[["self"],["__s"]],["result"]]],[11,"serialize","debruijn::graph","",11,[[["self"],["__s"]],["result"]]],[11,"serialize","","",12,[[["self"],["__s"]],["result"]]],[11,"serialize","debruijn::vmer","",48,[[["self"],["__s"]],["result"]]],[11,"serialize","debruijn","",3,[[["self"],["__s"]],["result"]]],[11,"serialize","","",2,[[["self"],["__s"]],["result"]]],[11,"deserialize","debruijn::kmer","",4,[[["__d"]],["result"]]],[11,"deserialize","","",5,[[["__d"]],["result"]]],[11,"deserialize","debruijn::dna_string","",10,[[["__d"]],["result"]]],[11,"deserialize","","",9,[[["__d"]],["result"]]],[11,"deserialize","debruijn::graph","",11,[[["__d"]],["result"]]],[11,"deserialize","","",12,[[["__d"]],["result"]]],[11,"deserialize","debruijn::vmer","",48,[[["__d"]],["result"]]],[11,"deserialize","debruijn","",3,[[["__d"]],["result"]]],[11,"deserialize","","",2,[[["__d"]],["result"]]]],"paths":[[3,"DnaBytes"],[3,"DnaSlice"],[3,"Exts"],[4,"Dir"],[3,"IntKmer"],[3,"VarIntKmer"],[8,"IntHelp"],[8,"KmerSize"],[3,"DnaStringSlice"],[3,"PackedDnaStringSet"],[3,"DnaString"],[3,"BaseGraph"],[3,"DebruijnGraph"],[3,"NodeKmer"],[3,"Node"],[8,"Array"],[3,"MspInterval"],[8,"KmerSummarizer"],[3,"CountFilter"],[3,"CountFilterSet"],[3,"CountFilterEqClass"],[8,"CompressionSpec"],[3,"SimpleCompress"],[3,"ScmapCompress"],[3,"CleanGraph"],[8,"Mer"],[8,"Kmer"],[8,"MerImmut"],[8,"Vmer"],[3,"MerIter"],[3,"KmerIter"],[3,"KmerExtsIter"],[3,"K48"],[3,"K40"],[3,"K30"],[3,"K24"],[3,"K20"],[3,"K14"],[3,"K12"],[3,"K6"],[3,"K5"],[3,"K4"],[3,"K3"],[3,"K2"],[3,"DnaStringIter"],[3,"NodeIter"],[3,"NodeIntoIter"],[3,"NodeKmerIter"],[3,"Lmer"]]};
initSearch(searchIndex);addSearchOptions(searchIndex);
