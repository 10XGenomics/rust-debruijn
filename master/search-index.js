var N=null,E="",T="t",U="u",searchIndex={};
var R=["debruijn","Convert an ASCII-encoded DNA base to a 2-bit representation","Convert a 2-bit representation of a base to a char","storage","Marker trait for generating K=40 Kmers","Marker trait for generating K=6 Kmers","top_mask","usize","bottom_mask","dna_string","dnastring","Create a DnaString corresponding to an ACGT-encoded str.","dnastringslice","to_string","Get slice containing the interval [`start`, `end`) of `self`","Get a `DnaStringSlice` containing `i`th sequence in the set","A compressed DeBruijn graph carrying auxiliary data on…","Iterator over nodes in a `DeBruijnGraph`","debruijngraph","option","Write the graph to GFA format","sequence","smallvec","A simple KmerSummarizer that only accepts kmers that are…","Remove extensions in valid_kmers that point to censored…","Take a BoomHash Object and build a compressed DeBruijn…","basegraph","is_palindrome","from_bytes","Create a Kmer from the first K bytes of `bytes`, which…","from_dna_string","complement","result","to_owned","try_from","borrow_mut","try_into","type_id","clone_into","into_iter","borrow","typeid","par_bridge","iterbridge","debruijn::kmer","debruijn::dna_string","debruijn::graph","debruijn::vmer","debruijn::msp","debruijn::filter","debruijn::compression","debruijn::clean_graph","summarize","join_test","set_slice_mut","Get the letter at the given position.","set_mut","Set a slice of bases in the kmer, using the packed…","Return the reverse complement of this kmer","Set base at `pos` to 2-bit encoded base `val`","Set `nbases` positions in the sequence, starting at `pos`.…","Return a new object containing the reverse complement of…","from_u64","extend_left","extend_right","Shift the base v into the left end of the kmer","get_kmer","max_len","Get the kmer starting at position pos","Create a new sequence with length `len`, initialized to…","Maximum sequence length that can be stored in this type","Efficiently extract a Kmer from the sequence","intkmer","varintkmer","dnabytes","dnaslice","ordering","partial_cmp","formatter","serialize","deserialize","DnaBytes","DnaSlice","VarIntKmer","KmerSize","DnaStringSlice","PackedDnaStringSet","DnaString","BaseGraph","DebruijnGraph","NodeKmer","MspInterval","KmerSummarizer","CountFilter","CountFilterSet","CountFilterEqClass","CompressionSpec","SimpleCompress","ScmapCompress","CleanGraph","KmerExtsIter","DnaStringIter","NodeIntoIter","NodeKmerIter"];

searchIndex[R[0]]={"doc":"debruijn: a De Bruijn graph library for DNA seqeunces in…","i":[[3,"MerIter",R[0],"Iterator over bases of a DNA sequence (bases will be…",N,N],[3,R[81],E,"A newtype wrapper around a `Vec<u8>` with implementations ",N,N],[12,"0",E,E,0,N],[3,R[82],E,"A newtype wrapper around a `&[u8]` with implementations ",N,N],[12,"0",E,E,1,N],[3,"Exts",E,"Store single-base extensions for a DNA Debruijn graph.",N,N],[12,"val",E,E,2,N],[3,"KmerIter",E,"Iterate over the `Kmer`s of a DNA sequence efficiently",N,N],[3,R[100],E,"Iterate over the `(Kmer, Exts)` tuples of a sequence and…",N,N],[4,"Dir",E,"Direction of motion in a DeBruijn graph",N,N],[13,"Left",E,E,3,N],[13,"Right",E,E,3,N],[5,"bits_to_ascii",E,R[2],N,[[["u8"]],["u8"]]],[5,"base_to_bits",E,R[1],N,[[["u8"]],["u8"]]],[5,"dna_only_base_to_bits",E,E,N,[[["u8"]],[R[19],["u8"]]]],[5,"is_valid_base",E,R[1],N,[[["u8"]],["bool"]]],[5,"bits_to_base",E,R[2],N,[[["u8"]],["char"]]],[5,R[31],E,"The complement of a 2-bit encoded base",N,[[["u8"]],["u8"]]],[0,"kmer",E,"Represent kmers with statically know length in compact…",N,N],[3,"IntKmer",R[44],"A Kmer sequence with a statically know K. K will fill the…",N,N],[12,R[3],E,E,4,N],[3,R[83],E,"A fixed-length Kmer sequence that may not fill the bits of T",N,N],[12,R[3],E,E,5,N],[12,"phantom",E,E,5,N],[3,"K48",E,"Marker struct for generating K=48 Kmers",N,N],[3,"K40",E,R[4],N,N],[3,"K30",E,R[4],N,N],[3,"K24",E,"Marker trait for generating K=24 Kmers",N,N],[3,"K20",E,"Marker trait for generating K=20 Kmers",N,N],[3,"K14",E,"Marker trait for generating K=14 Kmers",N,N],[3,"K12",E,"Marker trait for generating K=12 Kmers",N,N],[3,"K6",E,R[5],N,N],[3,"K5",E,R[5],N,N],[3,"K4",E,R[5],N,N],[3,"K3",E,R[5],N,N],[3,"K2",E,R[5],N,N],[6,"Kmer64",E,"64-base kmer, backed by a single u128",N,N],[6,"Kmer48",E,"48-base kmer, backed by a single u128",N,N],[6,"Kmer40",E,"40-base kmer, backed by a single u128",N,N],[6,"Kmer32",E,"32-base kmer, backed by a single u64",N,N],[6,"Kmer30",E,"30-base kmer, backed by a single u64",N,N],[6,"Kmer24",E,"24-base kmer, backed by a single u64",N,N],[6,"Kmer20",E,"20-base kmer, backed by a single u64",N,N],[6,"Kmer16",E,"16-base kmer, backed by a single u32",N,N],[6,"Kmer14",E,"14-base kmer, backed by a single u32",N,N],[6,"Kmer12",E,"12-base kmer, backed by a single u32",N,N],[6,"Kmer8",E,"8-base kmer, backed by a single u16",N,N],[6,"Kmer6",E,E,N,N],[6,"Kmer5",E,E,N,N],[6,"Kmer4",E,E,N,N],[6,"Kmer3",E,E,N,N],[6,"Kmer2",E,E,N,N],[8,"IntHelp",E,"Trait for specialized integer operations used in DeBruijn…",N,N],[10,"reverse_by_twos",E,"Reverse the order of 2-bit units of the integer",6,[[["self"]],["self"]]],[8,R[84],E,"Helper trait for declaring the K value of a Kmer. Will be…",N,N],[10,"K",E,E,7,[[],[R[7]]]],[11,R[6],E,E,4,[[[R[7]]],[T]]],[11,R[8],E,E,4,[[[R[7]]],[T]]],[11,R[6],E,E,5,[[[R[7]]],[T]]],[11,R[8],E,E,5,[[[R[7]]],[T]]],[0,R[9],R[0],"A 2-bit encoding of arbitrary length DNA sequences.",N,N],[3,R[87],R[45],"A container for sequence of DNA bases.",N,N],[3,R[101],E,"Iterator over values of a DnaStringoded sequence (values…",N,N],[3,R[85],E,"An immutable slice into a DnaString",N,N],[12,R[9],E,E,8,N],[12,"start",E,E,8,N],[12,"length",E,E,8,N],[12,"is_rc",E,E,8,N],[3,R[86],E,"Container for many distinct sequences, concatenated into a…",N,N],[12,R[21],E,E,9,N],[12,"start",E,E,9,N],[12,"length",E,E,9,N],[11,"new",E,"Create an empty DNA string",10,[[],[R[10]]]],[11,"len",E,"Length of the sequence",10,[[["self"]],[R[7]]]],[11,"with_capacity",E,"Create a new instance with a given capacity.",10,[[[R[7]]],["self"]]],[11,"blank",E,"Create a DnaString of length n initialized to all A's",10,[[[R[7]]],["self"]]],[11,R[30],E,R[11],10,[[["str"]],[R[10]]]],[11,"from_dna_only_string",E,R[11],10,[[["str"]],["vec",[R[10]]]]],[11,"from_acgt_bytes",E,"Create a DnaString from an ASCII ACGT-encoded byte slice.…",10,N],[11,"from_acgt_bytes_hashn",E,"Create a DnaString from an ACGT-encoded byte slice, Non…",10,N],[11,R[28],E,"Create a DnaString from a 0-4 encoded byte slice",10,N],[11,R[13],E,"Convert sequence to a String",10,[[["self"]],["string"]]],[11,"to_bytes",E,"Convert sequence to a Vector of 0-4 encoded bytes",10,[[["self"]],["vec",["u8"]]]],[11,"to_ascii_vec",E,"Convert sequence to a Vector of ascii-encoded bytes",10,[[["self"]],["vec",["u8"]]]],[11,"push",E,"Append a 0-4 encoded base.",10,[[["self"],["u8"]]]],[11,"push_bytes",E,"Push 0-4 encoded bases from a byte array.",10,[[["self"],["vec"],[R[7]]]]],[11,"iter",E,"Iterate over stored values (values will be unpacked into…",10,[[["self"]],["dnastringiter"]]],[11,"clear",E,"Clear the sequence.",10,[[["self"]]]],[11,"is_empty",E,E,10,[[["self"]],["bool"]]],[11,"prefix",E,"Get the length `k` prefix of the DnaString",10,[[["self"],[R[7]]],[R[12]]]],[11,"suffix",E,"Get the length `k` suffix of the DnaString",10,[[["self"],[R[7]]],[R[12]]]],[11,"slice",E,R[14],10,[[["self"],[R[7]],[R[7]]],[R[12]]]],[11,"reverse",E,"Create a fresh DnaString containing the reverse of `self`",10,[[["self"]],[R[10]]]],[11,R[27],E,E,8,[[["self"]],["bool"]]],[11,"bytes",E,E,8,[[["self"]],["vec",["u8"]]]],[11,"ascii",E,E,8,[[["self"]],["vec",["u8"]]]],[11,"to_dna_string",E,E,8,[[["self"]],["string"]]],[11,R[13],E,E,8,[[["self"]],["string"]]],[11,R[33],E,E,8,[[["self"]],[R[10]]]],[11,"slice",E,R[14],8,[[["self"],[R[7]],[R[7]]],[R[12]]]],[11,"new",E,"Create an empty `PackedDnaStringSet`",9,[[],["self"]]],[11,"get",E,R[15],9,[[["self"],[R[7]]],[R[12]]]],[11,"slice",E,R[15],9,[[["self"],[R[7]],[R[7]],[R[7]]],[R[12]]]],[11,"len",E,"Number of sequences in the set",9,[[["self"]],[R[7]]]],[11,"add",E,E,9,[[["self"],["s"]]]],[0,"graph",R[0],"Containers for path-compressed De Bruijn graphs",N,N],[3,R[88],R[46],R[16],N,N],[12,"sequences",E,E,11,N],[12,"exts",E,E,11,N],[12,"data",E,E,11,N],[12,"stranded",E,E,11,N],[3,R[89],E,R[16],N,N],[12,"base",E,E,12,N],[3,"NodeIter",E,R[17],N,N],[3,R[102],E,R[17],N,N],[3,R[90],E,R[17],N,N],[12,"node_id",E,E,13,N],[3,R[103],E,E,N,N],[3,"Node",E,"Unbranched sequence in the DeBruijn graph",N,N],[12,"node_id",E,E,14,N],[12,"graph",E,E,14,N],[11,"new",E,E,11,[[["bool"]],["self"]]],[11,"len",E,E,11,[[["self"]],[R[7]]]],[11,"combine",E,E,11,[[["i"]],["self"]]],[11,"add",E,E,11,[[["self"],["s"],["exts"],["d"]]]],[11,"finish",E,E,11,[[["self"]],[R[18]]]],[11,"finish_serial",E,E,11,[[["self"]],[R[18]]]],[11,"len",E,"Total number of nodes in the DeBruijn graph",12,[[["self"]],[R[7]]]],[11,"get_node",E,"Get a node given it's `node_id`",12,[[["self"],[R[7]]],["node"]]],[11,"iter_nodes",E,"Return an iterator over all nodes in the graph",12,[[["self"]],["nodeiter"]]],[11,"find_link",E,"Find a link in the graph, possibly handling a RC switch.",12,[[["self"],["k"],["dir"]],[R[19]]]],[11,"is_compressed",E,"Check whether the graph is fully compressed. Return `None`…",12,[[["self"]],[R[19]]]],[11,"fix_exts",E,"Remove non-existent extensions that may be created due to…",12,[[["self"],[R[19],["bitset"]]]]],[11,"get_valid_exts",E,E,12,[[["self"],[R[7]],[R[19],["bitset"]]],["exts"]]],[11,"max_path",E,"Find the highest-scoring, unambiguous path in the graph.…",12,[[["self"],["f"],["f2"]],["vec"]]],[11,"sequence_of_path",E,"Get the sequence of a path through the graph. The path is…",12,[[["self"],["i"]],[R[10]]]],[11,"to_dot",E,"Write the graph to a dot file.",12,[[["self"],["p"],["f"]]]],[11,"to_gfa",E,R[20],12,[[["self"],["p"]],[R[32],["error"]]]],[11,"to_gfa_with_tags",E,R[20],12,[[["self"],["p"],["f"]],[R[32],["error"]]]],[11,"to_json_rest",E,E,12,[[["self"],["f"],["w"],[R[19],["value"]]]]],[11,"to_json",E,"Write the graph to JSON",12,[[["self"],["f"],["w"]]]],[11,"print",E,"Print a text representation of the graph.",12,[[["self"]]]],[11,"print_with_data",E,E,12,[[["self"]]]],[11,"to_supernova_bv",E,E,12,[[["self"],["write"]],[R[32],["error"]]]],[11,"max_path_beam",E,E,12,[[["self"],[R[7]],["f"],["f2"]],["vec"]]],[11,"len",E,"Length of the sequence of this node",14,[[["self"]],[R[7]]]],[11,R[21],E,"Sequence of the node",14,[[["self"]],[R[12]]]],[11,"data",E,"Reference to auxiliarly data associated with the node",14,[[["self"]],["d"]]],[11,"exts",E,"Extension bases from this node",14,[[["self"]],["exts"]]],[11,"l_edges",E,"Edges leaving the left side of the node in the format",14,[[["self"]],[R[22]]]],[11,"r_edges",E,"Edges leaving the right side of the node in the format",14,[[["self"]],[R[22]]]],[11,"edges",E,"Edges leaving the 'dir' side of the node in the format",14,[[["self"],["dir"]],[R[22]]]],[0,"vmer",R[0],"Variable-length DNA strings packed into fixed-size structs.",N,N],[3,"Lmer",R[47],"Store a variable-length DNA sequence in a packed 2-bit…",N,N],[6,"Lmer1",E,E,N,N],[6,"Lmer2",E,E,N,N],[6,"Lmer3",E,E,N,N],[8,"Array",E,"Types that can be used as the backing store for a SmallVec",N,N],[16,"Item",E,E,15,N],[10,"new",E,E,15,[[],["self"]]],[10,"size",E,E,15,[[],[R[7]]]],[10,"as_slice",E,E,15,N],[10,"as_mut_slice",E,E,15,N],[0,"msp",R[0],"Methods for minimum substring partitioning of a DNA string",N,N],[3,R[91],R[48],E,N,N],[5,"simple_scan",E,"Determine MSP substrings of seq, for given k and p.…",N,N],[5,"msp_sequence",E,E,N,N],[11,"new",E,E,16,[[["u16"],["u32"],["u16"]],["mspinterval"]]],[11,"start",E,E,16,[[["self"]],[R[7]]]],[11,"len",E,E,16,[[["self"]],[R[7]]]],[11,"end",E,E,16,[[["self"]],[R[7]]]],[11,"range",E,E,16,[[["self"]],["range",[R[7]]]]],[11,"bucket",E,E,16,[[["self"]],["u16"]]],[0,"filter",R[0],"Methods for converting sequences into kmers, filtering…",N,N],[3,R[93],R[49],R[23],N,N],[3,R[94],E,R[23],N,N],[3,R[95],E,E,N,N],[5,"filter_kmers",E,"Process DNA sequences into kmers and determine the set of…",N,N],[5,"remove_censored_exts_sharded",E,R[24],N,[[["bool"],["vec"],["vec"]]]],[5,"remove_censored_exts",E,R[24],N,[[["bool"],["vec"]]]],[6,"EqClassIdType",E,E,N,N],[8,R[92],E,"Implement this trait to control how multiple observations…",N,N],[10,R[52],E,"The input `items` is an iterator over kmer observations.…",17,N],[11,"new",E,"Construct a `CountFilter` KmerSummarizer only accepts…",18,[[[R[7]]],["countfilter"]]],[11,"new",E,"Construct a `CountFilterSet` KmerSummarizer only accepts…",19,[[[R[7]]],["countfilterset"]]],[11,"new",E,E,20,[[[R[7]]],["countfiltereqclass"]]],[11,"get_eq_classes",E,E,20,[[["self"]],["vec",["vec"]]]],[11,"get_number_of_eq_classes",E,E,20,[[["self"]],[R[7]]]],[11,"fetch_add",E,E,20,[[["self"]],[R[7]]]],[0,"compression",R[0],"Create compressed DeBruijn graphs from uncompressed…",N,N],[3,R[97],R[50],"Simple implementation of `CompressionSpec` that lets you…",N,N],[3,R[98],E,E,N,N],[5,"compress_graph",E,"Perform path-compression on a (possibly partially…",N,[[["bool"],["s"],[R[18]],[R[19],["vec"]]],[R[18]]]],[5,"compress_kmers_with_hash",E,R[25],N,[[["bool"],["s"],["boomhashmap2"]],[R[26]]]],[5,"compress_kmers",E,R[25],N,[[["bool"],["s"],["vec"]],[R[26]]]],[8,R[96],E,"Customize the path-compression process. Implementing this…",N,N],[10,"reduce",E,E,21,[[["self"],["d"],["d"]],["d"]]],[10,R[53],E,E,21,[[["self"],["d"],["d"]],["bool"]]],[11,"new",E,E,22,[[["f"]],["simplecompress"]]],[11,"new",E,E,23,[[],["scmapcompress"]]],[0,"clean_graph",R[0],"DeBruijn graph simplification routines. Currently…",N,N],[3,R[99],R[51],E,N,N],[11,"new",E,E,24,[[["t1"]],["cleangraph"]]],[11,"find_bad_nodes",E,E,24,[[["self"],[R[18]]],["vec",[R[7]]]]],[0,"test",R[0],"Generate random genomes (with lots of re-used sustrings),…",N,N],[5,"random_base","debruijn::test","Generate a uniformly random base",N,[[],["u8"]]],[5,"random_dna",E,"Generate uniformly random DNA sequences",N,[[[R[7]]],["vec",["u8"]]]],[5,"edit_dna",E,"Randomly mutate each base with probability `p`",N,[[["vec"],["f64"],["r"]]]],[5,"random_kmer",E,E,N,[[],["k"]]],[5,"random_vmer",E,E,N,[[],["v"]]],[5,"simple_random_contigs",E,E,N,[[],["vec",["vec"]]]],[5,"random_contigs",E,E,N,[[],["vec",["vec"]]]],[8,"Mer",R[0],"Trait for interacting with DNA sequences",N,N],[10,"len",E,"Length of DNA sequence",25,[[["self"]],[R[7]]]],[10,"get",E,"Get 2-bit encoded base at position `pos`",25,[[["self"],[R[7]]],["u8"]]],[10,R[56],E,R[59],25,[[["self"],[R[7]],["u8"]]]],[10,R[54],E,R[60],25,[[["self"],[R[7]],[R[7]],["u64"]]]],[10,"rc",E,R[61],25,[[["self"]],["self"]]],[11,"iter",E,"Iterate over the bases in the sequence",25,[[["self"]],["meriter"]]],[8,"Kmer",E,"Encapsulates a Kmer sequence with statically known K.",N,N],[10,"empty",E,"Create a Kmer initialized to all A's",26,[[],["self"]]],[10,"k",E,"K value for this concrete type.",26,[[],[R[7]]]],[10,"to_u64",E,"Return the rank of this kmer in an lexicographic ordering…",26,[[["self"]],["u64"]]],[10,R[62],E,E,26,[[["u64"]],["self"]]],[10,R[63],E,"Add the base `v` to the left side of the sequence, and…",26,[[["self"],["u8"]],["self"]]],[10,R[64],E,"Add the base `v` to the right side of the sequence, and…",26,[[["self"],["u8"]],["self"]]],[11,"extend",E,"Add the base `v` to the side of sequence given by `dir`,…",26,[[["self"],["u8"],["dir"]],["self"]]],[11,"get_extensions",E,"Generate all the extension of this sequence given by…",26,[[["self"],["exts"],["dir"]],["vec"]]],[11,"min_rc_flip",E,"Return the minimum of the kmer and it's reverse…",26,N],[11,"min_rc",E,E,26,[[["self"]],["self"]]],[11,R[27],E,"Test if this Kmer and it's reverse complement are the same",26,[[["self"]],["bool"]]],[11,R[28],E,R[29],26,N],[11,"from_ascii",E,R[29],26,N],[11,R[13],E,"Return String containing Kmer sequence",26,[[["self"]],["string"]]],[11,"kmers_from_bytes",E,"Generate vector of all kmers contained in `str` encoded as…",26,N],[11,"kmers_from_ascii",E,"Generate vector of all kmers contained in `str`, encoded…",26,N],[8,"MerImmut",E,"An immutable interface to a Mer sequence.",N,N],[11,"set",E,E,27,[[["self"],[R[7]],["u8"]],["self"]]],[11,"set_slice",E,E,27,[[["self"],[R[7]],[R[7]],["u64"]],["self"]]],[8,"Vmer",E,"A DNA sequence with run-time variable length, up to a…",N,N],[10,"new",E,R[69],28,[[[R[7]]],["self"]]],[10,R[67],E,R[70],28,[[],[R[7]]]],[11,"from_slice",E,"Create a Vmer from a sequence of bytes",28,N],[10,R[66],E,R[71],28,[[["self"],[R[7]]],["k"]]],[11,"first_kmer",E,"Get the first Kmer from the sequence",28,[[["self"]],["k"]]],[11,"last_kmer",E,"Get the last kmer in the sequence",28,[[["self"]],["k"]]],[11,"both_term_kmer",E,"Get the terminal kmer of the sequence, on the both side of…",28,N],[11,"term_kmer",E,"Get the terminal kmer of the sequence, on the side of the…",28,[[["self"],["dir"]],["k"]]],[11,"iter_kmers",E,"Iterate over the kmers in the sequence",28,[[["self"]],["kmeriter"]]],[11,"iter_kmer_exts",E,"Iterate over the kmers and their extensions, given the…",28,[[["self"],["exts"]],["kmerextsiter"]]],[11,"flip",E,"Return a fresh Dir with the opposite direction",3,[[["self"]],["dir"]]],[11,"cond_flip",E,"Return a fresh Dir opposite direction if do_flip == True",3,[[["self"],["bool"]],["dir"]]],[11,"pick",E,"Pick between two alternatives, depending on the direction",3,[[["self"],[T],[T]],[T]]],[11,"new",E,E,2,[[["u8"]],["self"]]],[11,"empty",E,E,2,[[],["exts"]]],[11,"from_single_dirs",E,E,2,[[["exts"],["exts"]],["exts"]]],[11,"merge",E,E,2,[[["exts"],["exts"]],["exts"]]],[11,"add",E,E,2,[[["self"],["exts"]],["exts"]]],[11,"set",E,E,2,[[["self"],["dir"],["u8"]],["exts"]]],[11,"get",E,E,2,[[["self"],["dir"]],["vec",["u8"]]]],[11,"has_ext",E,E,2,[[["self"],["dir"],["u8"]],["bool"]]],[11,"from_slice_bounds",E,E,2,N],[11,R[30],E,E,2,[[[R[10]],[R[7]],[R[7]]],["exts"]]],[11,"num_exts_l",E,E,2,[[["self"]],["u8"]]],[11,"num_exts_r",E,E,2,[[["self"]],["u8"]]],[11,"num_ext_dir",E,E,2,[[["self"],["dir"]],["u8"]]],[11,"mk_left",E,E,2,[[["u8"]],["exts"]]],[11,"mk_right",E,E,2,[[["u8"]],["exts"]]],[11,"mk",E,E,2,[[["u8"],["u8"]],["exts"]]],[11,"get_unique_extension",E,E,2,[[["self"],["dir"]],[R[19],["u8"]]]],[11,"single_dir",E,E,2,[[["self"],["dir"]],["exts"]]],[11,R[31],E,"Complement the extension bases for each direction",2,[[["self"]],["exts"]]],[11,"reverse",E,E,2,[[["self"]],["exts"]]],[11,"rc",E,E,2,[[["self"]],["exts"]]],[11,R[39],E,E,29,[[["self"]],["i"]]],[11,"from",E,E,29,[[[T]],[T]]],[11,"into",E,E,29,[[["self"]],[U]]],[11,R[34],E,E,29,[[[U]],[R[32]]]],[11,R[40],E,E,29,[[["self"]],[T]]],[11,R[37],E,E,29,[[["self"]],[R[41]]]],[11,R[35],E,E,29,[[["self"]],[T]]],[11,R[36],E,E,29,[[["self"]],[R[32]]]],[11,R[42],E,E,29,[[["self"]],[R[43]]]],[11,"from",E,E,0,[[[T]],[T]]],[11,"into",E,E,0,[[["self"]],[U]]],[11,R[33],E,E,0,[[["self"]],[T]]],[11,R[38],E,E,0,N],[11,R[34],E,E,0,[[[U]],[R[32]]]],[11,R[40],E,E,0,[[["self"]],[T]]],[11,R[37],E,E,0,[[["self"]],[R[41]]]],[11,R[35],E,E,0,[[["self"]],[T]]],[11,R[36],E,E,0,[[["self"]],[R[32]]]],[11,"from",E,E,1,[[[T]],[T]]],[11,"into",E,E,1,[[["self"]],[U]]],[11,R[34],E,E,1,[[[U]],[R[32]]]],[11,R[40],E,E,1,[[["self"]],[T]]],[11,R[37],E,E,1,[[["self"]],[R[41]]]],[11,R[35],E,E,1,[[["self"]],[T]]],[11,R[36],E,E,1,[[["self"]],[R[32]]]],[11,"from",E,E,2,[[[T]],[T]]],[11,"into",E,E,2,[[["self"]],[U]]],[11,R[33],E,E,2,[[["self"]],[T]]],[11,R[38],E,E,2,N],[11,R[34],E,E,2,[[[U]],[R[32]]]],[11,R[40],E,E,2,[[["self"]],[T]]],[11,R[37],E,E,2,[[["self"]],[R[41]]]],[11,R[35],E,E,2,[[["self"]],[T]]],[11,R[36],E,E,2,[[["self"]],[R[32]]]],[11,R[39],E,E,30,[[["self"]],["i"]]],[11,"from",E,E,30,[[[T]],[T]]],[11,"into",E,E,30,[[["self"]],[U]]],[11,R[34],E,E,30,[[[U]],[R[32]]]],[11,R[40],E,E,30,[[["self"]],[T]]],[11,R[37],E,E,30,[[["self"]],[R[41]]]],[11,R[35],E,E,30,[[["self"]],[T]]],[11,R[36],E,E,30,[[["self"]],[R[32]]]],[11,R[42],E,E,30,[[["self"]],[R[43]]]],[11,R[39],E,E,31,[[["self"]],["i"]]],[11,"from",E,E,31,[[[T]],[T]]],[11,"into",E,E,31,[[["self"]],[U]]],[11,R[34],E,E,31,[[[U]],[R[32]]]],[11,R[40],E,E,31,[[["self"]],[T]]],[11,R[37],E,E,31,[[["self"]],[R[41]]]],[11,R[35],E,E,31,[[["self"]],[T]]],[11,R[36],E,E,31,[[["self"]],[R[32]]]],[11,R[42],E,E,31,[[["self"]],[R[43]]]],[11,"from",E,E,3,[[[T]],[T]]],[11,"into",E,E,3,[[["self"]],[U]]],[11,R[33],E,E,3,[[["self"]],[T]]],[11,R[38],E,E,3,N],[11,R[34],E,E,3,[[[U]],[R[32]]]],[11,R[40],E,E,3,[[["self"]],[T]]],[11,R[37],E,E,3,[[["self"]],[R[41]]]],[11,R[35],E,E,3,[[["self"]],[T]]],[11,R[36],E,E,3,[[["self"]],[R[32]]]],[11,"from",R[44],E,4,[[[T]],[T]]],[11,"into",E,E,4,[[["self"]],[U]]],[11,R[33],E,E,4,[[["self"]],[T]]],[11,R[38],E,E,4,N],[11,R[34],E,E,4,[[[U]],[R[32]]]],[11,R[40],E,E,4,[[["self"]],[T]]],[11,R[37],E,E,4,[[["self"]],[R[41]]]],[11,R[35],E,E,4,[[["self"]],[T]]],[11,R[36],E,E,4,[[["self"]],[R[32]]]],[11,"from",E,E,5,[[[T]],[T]]],[11,"into",E,E,5,[[["self"]],[U]]],[11,R[33],E,E,5,[[["self"]],[T]]],[11,R[38],E,E,5,N],[11,R[34],E,E,5,[[[U]],[R[32]]]],[11,R[40],E,E,5,[[["self"]],[T]]],[11,R[37],E,E,5,[[["self"]],[R[41]]]],[11,R[35],E,E,5,[[["self"]],[T]]],[11,R[36],E,E,5,[[["self"]],[R[32]]]],[11,"from",E,E,32,[[[T]],[T]]],[11,"into",E,E,32,[[["self"]],[U]]],[11,R[33],E,E,32,[[["self"]],[T]]],[11,R[38],E,E,32,N],[11,R[34],E,E,32,[[[U]],[R[32]]]],[11,R[40],E,E,32,[[["self"]],[T]]],[11,R[37],E,E,32,[[["self"]],[R[41]]]],[11,R[35],E,E,32,[[["self"]],[T]]],[11,R[36],E,E,32,[[["self"]],[R[32]]]],[11,"from",E,E,33,[[[T]],[T]]],[11,"into",E,E,33,[[["self"]],[U]]],[11,R[33],E,E,33,[[["self"]],[T]]],[11,R[38],E,E,33,N],[11,R[34],E,E,33,[[[U]],[R[32]]]],[11,R[40],E,E,33,[[["self"]],[T]]],[11,R[37],E,E,33,[[["self"]],[R[41]]]],[11,R[35],E,E,33,[[["self"]],[T]]],[11,R[36],E,E,33,[[["self"]],[R[32]]]],[11,"from",E,E,34,[[[T]],[T]]],[11,"into",E,E,34,[[["self"]],[U]]],[11,R[33],E,E,34,[[["self"]],[T]]],[11,R[38],E,E,34,N],[11,R[34],E,E,34,[[[U]],[R[32]]]],[11,R[40],E,E,34,[[["self"]],[T]]],[11,R[37],E,E,34,[[["self"]],[R[41]]]],[11,R[35],E,E,34,[[["self"]],[T]]],[11,R[36],E,E,34,[[["self"]],[R[32]]]],[11,"from",E,E,35,[[[T]],[T]]],[11,"into",E,E,35,[[["self"]],[U]]],[11,R[33],E,E,35,[[["self"]],[T]]],[11,R[38],E,E,35,N],[11,R[34],E,E,35,[[[U]],[R[32]]]],[11,R[40],E,E,35,[[["self"]],[T]]],[11,R[37],E,E,35,[[["self"]],[R[41]]]],[11,R[35],E,E,35,[[["self"]],[T]]],[11,R[36],E,E,35,[[["self"]],[R[32]]]],[11,"from",E,E,36,[[[T]],[T]]],[11,"into",E,E,36,[[["self"]],[U]]],[11,R[33],E,E,36,[[["self"]],[T]]],[11,R[38],E,E,36,N],[11,R[34],E,E,36,[[[U]],[R[32]]]],[11,R[40],E,E,36,[[["self"]],[T]]],[11,R[37],E,E,36,[[["self"]],[R[41]]]],[11,R[35],E,E,36,[[["self"]],[T]]],[11,R[36],E,E,36,[[["self"]],[R[32]]]],[11,"from",E,E,37,[[[T]],[T]]],[11,"into",E,E,37,[[["self"]],[U]]],[11,R[33],E,E,37,[[["self"]],[T]]],[11,R[38],E,E,37,N],[11,R[34],E,E,37,[[[U]],[R[32]]]],[11,R[40],E,E,37,[[["self"]],[T]]],[11,R[37],E,E,37,[[["self"]],[R[41]]]],[11,R[35],E,E,37,[[["self"]],[T]]],[11,R[36],E,E,37,[[["self"]],[R[32]]]],[11,"from",E,E,38,[[[T]],[T]]],[11,"into",E,E,38,[[["self"]],[U]]],[11,R[33],E,E,38,[[["self"]],[T]]],[11,R[38],E,E,38,N],[11,R[34],E,E,38,[[[U]],[R[32]]]],[11,R[40],E,E,38,[[["self"]],[T]]],[11,R[37],E,E,38,[[["self"]],[R[41]]]],[11,R[35],E,E,38,[[["self"]],[T]]],[11,R[36],E,E,38,[[["self"]],[R[32]]]],[11,"from",E,E,39,[[[T]],[T]]],[11,"into",E,E,39,[[["self"]],[U]]],[11,R[33],E,E,39,[[["self"]],[T]]],[11,R[38],E,E,39,N],[11,R[34],E,E,39,[[[U]],[R[32]]]],[11,R[40],E,E,39,[[["self"]],[T]]],[11,R[37],E,E,39,[[["self"]],[R[41]]]],[11,R[35],E,E,39,[[["self"]],[T]]],[11,R[36],E,E,39,[[["self"]],[R[32]]]],[11,"from",E,E,40,[[[T]],[T]]],[11,"into",E,E,40,[[["self"]],[U]]],[11,R[33],E,E,40,[[["self"]],[T]]],[11,R[38],E,E,40,N],[11,R[34],E,E,40,[[[U]],[R[32]]]],[11,R[40],E,E,40,[[["self"]],[T]]],[11,R[37],E,E,40,[[["self"]],[R[41]]]],[11,R[35],E,E,40,[[["self"]],[T]]],[11,R[36],E,E,40,[[["self"]],[R[32]]]],[11,"from",E,E,41,[[[T]],[T]]],[11,"into",E,E,41,[[["self"]],[U]]],[11,R[33],E,E,41,[[["self"]],[T]]],[11,R[38],E,E,41,N],[11,R[34],E,E,41,[[[U]],[R[32]]]],[11,R[40],E,E,41,[[["self"]],[T]]],[11,R[37],E,E,41,[[["self"]],[R[41]]]],[11,R[35],E,E,41,[[["self"]],[T]]],[11,R[36],E,E,41,[[["self"]],[R[32]]]],[11,"from",E,E,42,[[[T]],[T]]],[11,"into",E,E,42,[[["self"]],[U]]],[11,R[33],E,E,42,[[["self"]],[T]]],[11,R[38],E,E,42,N],[11,R[34],E,E,42,[[[U]],[R[32]]]],[11,R[40],E,E,42,[[["self"]],[T]]],[11,R[37],E,E,42,[[["self"]],[R[41]]]],[11,R[35],E,E,42,[[["self"]],[T]]],[11,R[36],E,E,42,[[["self"]],[R[32]]]],[11,"from",E,E,43,[[[T]],[T]]],[11,"into",E,E,43,[[["self"]],[U]]],[11,R[33],E,E,43,[[["self"]],[T]]],[11,R[38],E,E,43,N],[11,R[34],E,E,43,[[[U]],[R[32]]]],[11,R[40],E,E,43,[[["self"]],[T]]],[11,R[37],E,E,43,[[["self"]],[R[41]]]],[11,R[35],E,E,43,[[["self"]],[T]]],[11,R[36],E,E,43,[[["self"]],[R[32]]]],[11,"from",R[45],E,10,[[[T]],[T]]],[11,"into",E,E,10,[[["self"]],[U]]],[11,R[33],E,E,10,[[["self"]],[T]]],[11,R[38],E,E,10,N],[11,R[34],E,E,10,[[[U]],[R[32]]]],[11,R[40],E,E,10,[[["self"]],[T]]],[11,R[37],E,E,10,[[["self"]],[R[41]]]],[11,R[35],E,E,10,[[["self"]],[T]]],[11,R[36],E,E,10,[[["self"]],[R[32]]]],[11,R[39],E,E,44,[[["self"]],["i"]]],[11,"from",E,E,44,[[[T]],[T]]],[11,"into",E,E,44,[[["self"]],[U]]],[11,R[34],E,E,44,[[[U]],[R[32]]]],[11,R[40],E,E,44,[[["self"]],[T]]],[11,R[37],E,E,44,[[["self"]],[R[41]]]],[11,R[35],E,E,44,[[["self"]],[T]]],[11,R[36],E,E,44,[[["self"]],[R[32]]]],[11,R[42],E,E,44,[[["self"]],[R[43]]]],[11,"from",E,E,8,[[[T]],[T]]],[11,"into",E,E,8,[[["self"]],[U]]],[11,R[33],E,E,8,[[["self"]],[T]]],[11,R[38],E,E,8,N],[11,R[34],E,E,8,[[[U]],[R[32]]]],[11,R[40],E,E,8,[[["self"]],[T]]],[11,R[37],E,E,8,[[["self"]],[R[41]]]],[11,R[35],E,E,8,[[["self"]],[T]]],[11,R[36],E,E,8,[[["self"]],[R[32]]]],[11,"from",E,E,9,[[[T]],[T]]],[11,"into",E,E,9,[[["self"]],[U]]],[11,R[33],E,E,9,[[["self"]],[T]]],[11,R[38],E,E,9,N],[11,R[34],E,E,9,[[[U]],[R[32]]]],[11,R[40],E,E,9,[[["self"]],[T]]],[11,R[37],E,E,9,[[["self"]],[R[41]]]],[11,R[35],E,E,9,[[["self"]],[T]]],[11,R[36],E,E,9,[[["self"]],[R[32]]]],[11,"from",R[46],E,11,[[[T]],[T]]],[11,"into",E,E,11,[[["self"]],[U]]],[11,R[33],E,E,11,[[["self"]],[T]]],[11,R[38],E,E,11,N],[11,R[34],E,E,11,[[[U]],[R[32]]]],[11,R[40],E,E,11,[[["self"]],[T]]],[11,R[37],E,E,11,[[["self"]],[R[41]]]],[11,R[35],E,E,11,[[["self"]],[T]]],[11,R[36],E,E,11,[[["self"]],[R[32]]]],[11,"from",E,E,12,[[[T]],[T]]],[11,"into",E,E,12,[[["self"]],[U]]],[11,R[34],E,E,12,[[[U]],[R[32]]]],[11,R[40],E,E,12,[[["self"]],[T]]],[11,R[37],E,E,12,[[["self"]],[R[41]]]],[11,R[35],E,E,12,[[["self"]],[T]]],[11,R[36],E,E,12,[[["self"]],[R[32]]]],[11,R[39],E,E,45,[[["self"]],["i"]]],[11,"from",E,E,45,[[[T]],[T]]],[11,"into",E,E,45,[[["self"]],[U]]],[11,R[34],E,E,45,[[[U]],[R[32]]]],[11,R[40],E,E,45,[[["self"]],[T]]],[11,R[37],E,E,45,[[["self"]],[R[41]]]],[11,R[35],E,E,45,[[["self"]],[T]]],[11,R[36],E,E,45,[[["self"]],[R[32]]]],[11,R[42],E,E,45,[[["self"]],[R[43]]]],[11,R[39],E,E,46,[[["self"]],["i"]]],[11,"from",E,E,46,[[[T]],[T]]],[11,"into",E,E,46,[[["self"]],[U]]],[11,R[34],E,E,46,[[[U]],[R[32]]]],[11,R[40],E,E,46,[[["self"]],[T]]],[11,R[37],E,E,46,[[["self"]],[R[41]]]],[11,R[35],E,E,46,[[["self"]],[T]]],[11,R[36],E,E,46,[[["self"]],[R[32]]]],[11,R[42],E,E,46,[[["self"]],[R[43]]]],[11,R[39],E,E,13,[[["self"]],["i"]]],[11,"from",E,E,13,[[[T]],[T]]],[11,"into",E,E,13,[[["self"]],[U]]],[11,R[33],E,E,13,[[["self"]],[T]]],[11,R[38],E,E,13,N],[11,R[34],E,E,13,[[[U]],[R[32]]]],[11,R[40],E,E,13,[[["self"]],[T]]],[11,R[37],E,E,13,[[["self"]],[R[41]]]],[11,R[35],E,E,13,[[["self"]],[T]]],[11,R[36],E,E,13,[[["self"]],[R[32]]]],[11,R[39],E,E,47,[[["self"]],["i"]]],[11,"from",E,E,47,[[[T]],[T]]],[11,"into",E,E,47,[[["self"]],[U]]],[11,R[34],E,E,47,[[[U]],[R[32]]]],[11,R[40],E,E,47,[[["self"]],[T]]],[11,R[37],E,E,47,[[["self"]],[R[41]]]],[11,R[35],E,E,47,[[["self"]],[T]]],[11,R[36],E,E,47,[[["self"]],[R[32]]]],[11,R[42],E,E,47,[[["self"]],[R[43]]]],[11,"from",E,E,14,[[[T]],[T]]],[11,"into",E,E,14,[[["self"]],[U]]],[11,R[34],E,E,14,[[[U]],[R[32]]]],[11,R[40],E,E,14,[[["self"]],[T]]],[11,R[37],E,E,14,[[["self"]],[R[41]]]],[11,R[35],E,E,14,[[["self"]],[T]]],[11,R[36],E,E,14,[[["self"]],[R[32]]]],[11,"from",R[47],E,48,[[[T]],[T]]],[11,"into",E,E,48,[[["self"]],[U]]],[11,R[33],E,E,48,[[["self"]],[T]]],[11,R[38],E,E,48,N],[11,R[34],E,E,48,[[[U]],[R[32]]]],[11,R[40],E,E,48,[[["self"]],[T]]],[11,R[37],E,E,48,[[["self"]],[R[41]]]],[11,R[35],E,E,48,[[["self"]],[T]]],[11,R[36],E,E,48,[[["self"]],[R[32]]]],[11,"from",R[48],E,16,[[[T]],[T]]],[11,"into",E,E,16,[[["self"]],[U]]],[11,R[34],E,E,16,[[[U]],[R[32]]]],[11,R[40],E,E,16,[[["self"]],[T]]],[11,R[37],E,E,16,[[["self"]],[R[41]]]],[11,R[35],E,E,16,[[["self"]],[T]]],[11,R[36],E,E,16,[[["self"]],[R[32]]]],[11,"from",R[49],E,18,[[[T]],[T]]],[11,"into",E,E,18,[[["self"]],[U]]],[11,R[34],E,E,18,[[[U]],[R[32]]]],[11,R[40],E,E,18,[[["self"]],[T]]],[11,R[37],E,E,18,[[["self"]],[R[41]]]],[11,R[35],E,E,18,[[["self"]],[T]]],[11,R[36],E,E,18,[[["self"]],[R[32]]]],[11,"from",E,E,19,[[[T]],[T]]],[11,"into",E,E,19,[[["self"]],[U]]],[11,R[34],E,E,19,[[[U]],[R[32]]]],[11,R[40],E,E,19,[[["self"]],[T]]],[11,R[37],E,E,19,[[["self"]],[R[41]]]],[11,R[35],E,E,19,[[["self"]],[T]]],[11,R[36],E,E,19,[[["self"]],[R[32]]]],[11,"from",E,E,20,[[[T]],[T]]],[11,"into",E,E,20,[[["self"]],[U]]],[11,R[34],E,E,20,[[[U]],[R[32]]]],[11,R[40],E,E,20,[[["self"]],[T]]],[11,R[37],E,E,20,[[["self"]],[R[41]]]],[11,R[35],E,E,20,[[["self"]],[T]]],[11,R[36],E,E,20,[[["self"]],[R[32]]]],[11,"from",R[50],E,22,[[[T]],[T]]],[11,"into",E,E,22,[[["self"]],[U]]],[11,R[34],E,E,22,[[[U]],[R[32]]]],[11,R[40],E,E,22,[[["self"]],[T]]],[11,R[37],E,E,22,[[["self"]],[R[41]]]],[11,R[35],E,E,22,[[["self"]],[T]]],[11,R[36],E,E,22,[[["self"]],[R[32]]]],[11,"from",E,E,23,[[[T]],[T]]],[11,"into",E,E,23,[[["self"]],[U]]],[11,R[34],E,E,23,[[[U]],[R[32]]]],[11,R[40],E,E,23,[[["self"]],[T]]],[11,R[37],E,E,23,[[["self"]],[R[41]]]],[11,R[35],E,E,23,[[["self"]],[T]]],[11,R[36],E,E,23,[[["self"]],[R[32]]]],[11,"from",R[51],E,24,[[[T]],[T]]],[11,"into",E,E,24,[[["self"]],[U]]],[11,R[34],E,E,24,[[[U]],[R[32]]]],[11,R[40],E,E,24,[[["self"]],[T]]],[11,R[37],E,E,24,[[["self"]],[R[41]]]],[11,R[35],E,E,24,[[["self"]],[T]]],[11,R[36],E,E,24,[[["self"]],[R[32]]]],[11,"K",R[44],E,32,[[],[R[7]]]],[11,"K",E,E,33,[[],[R[7]]]],[11,"K",E,E,34,[[],[R[7]]]],[11,"K",E,E,35,[[],[R[7]]]],[11,"K",E,E,36,[[],[R[7]]]],[11,"K",E,E,37,[[],[R[7]]]],[11,"K",E,E,38,[[],[R[7]]]],[11,"K",E,E,39,[[],[R[7]]]],[11,"K",E,E,40,[[],[R[7]]]],[11,"K",E,E,41,[[],[R[7]]]],[11,"K",E,E,42,[[],[R[7]]]],[11,"K",E,E,43,[[],[R[7]]]],[11,R[52],R[49],E,18,N],[11,R[52],E,E,19,N],[11,R[52],E,E,20,N],[11,"reduce",R[50],E,22,[[["self"],["d"],["d"]],["d"]]],[11,R[53],E,E,22,[[["self"],["d"],["d"]],["bool"]]],[11,"reduce",E,E,23,[[["self"],["d"],["d"]],["d"]]],[11,R[53],E,E,23,[[["self"],["d"],["d"]],["bool"]]],[11,"len",R[44],E,4,[[["self"]],[R[7]]]],[11,"get",E,R[55],4,[[["self"],[R[7]]],["u8"]]],[11,R[56],E,E,4,[[["self"],[R[7]],["u8"]]]],[11,R[54],E,R[57],4,[[["self"],[R[7]],[R[7]],["u64"]]]],[11,"rc",E,R[58],4,[[["self"]],["self"]]],[11,"len",E,E,5,[[["self"]],[R[7]]]],[11,"get",E,R[55],5,[[["self"],[R[7]]],["u8"]]],[11,R[56],E,E,5,[[["self"],[R[7]],["u8"]]]],[11,R[54],E,R[57],5,[[["self"],[R[7]],[R[7]],["u64"]]]],[11,"rc",E,R[58],5,[[["self"]],["self"]]],[11,"len",R[45],E,10,[[["self"]],[R[7]]]],[11,"get",E,"Get the value at position `i`.",10,[[["self"],[R[7]]],["u8"]]],[11,R[56],E,"Set the value as position `i`.",10,[[["self"],[R[7]],["u8"]]]],[11,R[54],E,E,10,[[["self"],[R[7]],[R[7]],["u64"]]]],[11,"rc",E,E,10,[[["self"]],[R[10]]]],[11,"len",E,E,8,[[["self"]],[R[7]]]],[11,"get",E,"Get the base at position `i`.",8,[[["self"],[R[7]]],["u8"]]],[11,R[56],E,"Set the base as position `i`.",8,[[["self"],[R[7]],["u8"]]]],[11,R[54],E,E,8,[[["self"],[R[7]],[R[7]],["u64"]]]],[11,"rc",E,E,8,[[["self"]],[R[12]]]],[11,"len",R[47],"The length of the DNA string",48,[[["self"]],[R[7]]]],[11,"get",E,"Get the base at position pos",48,[[["self"],[R[7]]],["u8"]]],[11,R[56],E,"Return a new Lmer with position pos set to base val",48,[[["self"],[R[7]],["u8"]]]],[11,R[54],E,E,48,[[["self"],[R[7]],[R[7]],["u64"]]]],[11,"rc",E,E,48,[[["self"]],["self"]]],[11,"len",R[0],E,0,[[["self"]],[R[7]]]],[11,"get",E,E,0,[[["self"],[R[7]]],["u8"]]],[11,R[56],E,R[59],0,[[["self"],[R[7]],["u8"]]]],[11,R[54],E,R[60],0,[[["self"],[R[7]],[R[7]],["u64"]]]],[11,"rc",E,R[61],0,[[["self"]],["self"]]],[11,"len",E,E,1,[[["self"]],[R[7]]]],[11,"get",E,E,1,[[["self"],[R[7]]],["u8"]]],[11,R[56],E,R[59],1,[[["self"],[R[7]],["u8"]]]],[11,R[54],E,R[60],1,[[["self"],[R[7]],[R[7]],["u64"]]]],[11,"rc",E,R[61],1,[[["self"]],["self"]]],[11,"empty",R[44],E,4,[[],["self"]]],[11,"k",E,E,4,[[],[R[7]]]],[11,R[62],E,E,4,[[["u64"]],[R[72]]]],[11,"to_u64",E,E,4,[[["self"]],["u64"]]],[11,R[63],E,R[65],4,[[["self"],["u8"]],["self"]]],[11,R[64],E,E,4,[[["self"],["u8"]],["self"]]],[11,"empty",E,E,5,[[],["self"]]],[11,"k",E,E,5,[[],[R[7]]]],[11,"to_u64",E,E,5,[[["self"]],["u64"]]],[11,R[62],E,E,5,[[["u64"]],["self"]]],[11,R[63],E,R[65],5,[[["self"],["u8"]],["self"]]],[11,R[64],E,E,5,[[["self"],["u8"]],["self"]]],[11,"new",R[45],E,10,[[[R[7]]],["self"]]],[11,R[67],E,E,10,[[],[R[7]]]],[11,R[66],E,R[68],10,[[["self"],[R[7]]],["k"]]],[11,"new",E,E,8,[[[R[7]]],["self"]]],[11,R[67],E,E,8,[[],[R[7]]]],[11,R[66],E,R[68],8,[[["self"],[R[7]]],["k"]]],[11,R[67],R[47],E,48,[[],[R[7]]]],[11,"new",E,"Initialize an blank Lmer of length len. Will initially…",48,[[[R[7]]],["lmer"]]],[11,R[66],E,R[68],48,[[["self"],[R[7]]],["k"]]],[11,"new",R[0],R[69],0,[[[R[7]]],["self"]]],[11,R[67],E,R[70],0,[[],[R[7]]]],[11,R[66],E,R[71],0,[[["self"],[R[7]]],["k"]]],[11,"new",E,R[69],1,[[[R[7]]],["self"]]],[11,R[67],E,R[70],1,[[],[R[7]]]],[11,R[66],E,R[71],1,[[["self"],[R[7]]],["k"]]],[11,"next",R[45],E,44,[[["self"]],[R[19],["u8"]]]],[11,"next",R[46],E,45,[[["self"]],[R[19],["node"]]]],[11,"next",E,E,46,[[["self"]],[R[19]]]],[11,"next",E,E,47,[[["self"]],[R[19]]]],[11,"size_hint",E,E,47,N],[11,"nth",E,"Provide a 'fast-forward' capability for this iterator MPHF…",47,[[["self"],[R[7]]],[R[19]]]],[11,"next",R[0],E,29,[[["self"]],[R[19],["u8"]]]],[11,"next",E,E,30,[[["self"]],[R[19]]]],[11,"next",E,E,31,[[["self"]],[R[19]]]],[11,"eq",R[44],E,4,[[["self"],[R[72]]],["bool"]]],[11,"ne",E,E,4,[[["self"],[R[72]]],["bool"]]],[11,"eq",E,E,5,[[["self"],[R[73]]],["bool"]]],[11,"ne",E,E,5,[[["self"],[R[73]]],["bool"]]],[11,"eq",E,E,32,[[["self"],["k48"]],["bool"]]],[11,"eq",E,E,33,[[["self"],["k40"]],["bool"]]],[11,"eq",E,E,34,[[["self"],["k30"]],["bool"]]],[11,"eq",E,E,35,[[["self"],["k24"]],["bool"]]],[11,"eq",E,E,36,[[["self"],["k20"]],["bool"]]],[11,"eq",E,E,37,[[["self"],["k14"]],["bool"]]],[11,"eq",E,E,38,[[["self"],["k12"]],["bool"]]],[11,"eq",E,E,39,[[["self"],["k6"]],["bool"]]],[11,"eq",E,E,40,[[["self"],["k5"]],["bool"]]],[11,"eq",E,E,41,[[["self"],["k4"]],["bool"]]],[11,"eq",E,E,42,[[["self"],["k3"]],["bool"]]],[11,"eq",E,E,43,[[["self"],["k2"]],["bool"]]],[11,"eq",R[45],E,10,[[["self"],[R[10]]],["bool"]]],[11,"ne",E,E,10,[[["self"],[R[10]]],["bool"]]],[11,"eq",E,E,8,[[["self"],[R[12]]],["bool"]]],[11,"eq",R[47],E,48,[[["self"],["lmer"]],["bool"]]],[11,"ne",E,E,48,[[["self"],["lmer"]],["bool"]]],[11,"eq",R[0],E,0,[[["self"],[R[74]]],["bool"]]],[11,"ne",E,E,0,[[["self"],[R[74]]],["bool"]]],[11,"eq",E,E,1,[[["self"],[R[75]]],["bool"]]],[11,"ne",E,E,1,[[["self"],[R[75]]],["bool"]]],[11,"eq",E,E,2,[[["self"],["exts"]],["bool"]]],[11,"ne",E,E,2,[[["self"],["exts"]],["bool"]]],[11,R[39],R[46],E,13,N],[11,"cmp",R[44],E,4,[[["self"],[R[72]]],[R[76]]]],[11,"cmp",E,E,5,[[["self"],[R[73]]],[R[76]]]],[11,"cmp",E,E,32,[[["self"],["k48"]],[R[76]]]],[11,"cmp",E,E,33,[[["self"],["k40"]],[R[76]]]],[11,"cmp",E,E,34,[[["self"],["k30"]],[R[76]]]],[11,"cmp",E,E,35,[[["self"],["k24"]],[R[76]]]],[11,"cmp",E,E,36,[[["self"],["k20"]],[R[76]]]],[11,"cmp",E,E,37,[[["self"],["k14"]],[R[76]]]],[11,"cmp",E,E,38,[[["self"],["k12"]],[R[76]]]],[11,"cmp",E,E,39,[[["self"],["k6"]],[R[76]]]],[11,"cmp",E,E,40,[[["self"],["k5"]],[R[76]]]],[11,"cmp",E,E,41,[[["self"],["k4"]],[R[76]]]],[11,"cmp",E,E,42,[[["self"],["k3"]],[R[76]]]],[11,"cmp",E,E,43,[[["self"],["k2"]],[R[76]]]],[11,"cmp",R[45],E,10,[[["self"],[R[10]]],[R[76]]]],[11,"cmp",R[47],E,48,[[["self"],["lmer"]],[R[76]]]],[11,"cmp",R[0],E,0,[[["self"],[R[74]]],[R[76]]]],[11,"cmp",E,E,1,[[["self"],[R[75]]],[R[76]]]],[11,"cmp",E,E,2,[[["self"],["exts"]],[R[76]]]],[11,"clone",R[44],E,4,[[["self"]],[R[72]]]],[11,"clone",E,E,5,[[["self"]],[R[73]]]],[11,"clone",E,E,32,[[["self"]],["k48"]]],[11,"clone",E,E,33,[[["self"]],["k40"]]],[11,"clone",E,E,34,[[["self"]],["k30"]]],[11,"clone",E,E,35,[[["self"]],["k24"]]],[11,"clone",E,E,36,[[["self"]],["k20"]]],[11,"clone",E,E,37,[[["self"]],["k14"]]],[11,"clone",E,E,38,[[["self"]],["k12"]]],[11,"clone",E,E,39,[[["self"]],["k6"]]],[11,"clone",E,E,40,[[["self"]],["k5"]]],[11,"clone",E,E,41,[[["self"]],["k4"]]],[11,"clone",E,E,42,[[["self"]],["k3"]]],[11,"clone",E,E,43,[[["self"]],["k2"]]],[11,"clone",R[45],E,10,[[["self"]],[R[10]]]],[11,"clone",E,E,8,[[["self"]],[R[12]]]],[11,"clone",E,E,9,[[["self"]],["packeddnastringset"]]],[11,"clone",R[46],E,11,[[["self"]],[R[26]]]],[11,"clone",E,E,13,[[["self"]],["nodekmer"]]],[11,"clone",R[47],E,48,[[["self"]],["lmer"]]],[11,"clone",R[0],E,0,[[["self"]],[R[74]]]],[11,"clone",E,E,3,[[["self"]],["dir"]]],[11,"clone",E,E,2,[[["self"]],["exts"]]],[11,R[77],R[44],E,4,[[["self"],[R[72]]],[R[19],[R[76]]]]],[11,"lt",E,E,4,[[["self"],[R[72]]],["bool"]]],[11,"le",E,E,4,[[["self"],[R[72]]],["bool"]]],[11,"gt",E,E,4,[[["self"],[R[72]]],["bool"]]],[11,"ge",E,E,4,[[["self"],[R[72]]],["bool"]]],[11,R[77],E,E,5,[[["self"],[R[73]]],[R[19],[R[76]]]]],[11,"lt",E,E,5,[[["self"],[R[73]]],["bool"]]],[11,"le",E,E,5,[[["self"],[R[73]]],["bool"]]],[11,"gt",E,E,5,[[["self"],[R[73]]],["bool"]]],[11,"ge",E,E,5,[[["self"],[R[73]]],["bool"]]],[11,R[77],E,E,32,[[["self"],["k48"]],[R[19],[R[76]]]]],[11,R[77],E,E,33,[[["self"],["k40"]],[R[19],[R[76]]]]],[11,R[77],E,E,34,[[["self"],["k30"]],[R[19],[R[76]]]]],[11,R[77],E,E,35,[[["self"],["k24"]],[R[19],[R[76]]]]],[11,R[77],E,E,36,[[["self"],["k20"]],[R[19],[R[76]]]]],[11,R[77],E,E,37,[[["self"],["k14"]],[R[19],[R[76]]]]],[11,R[77],E,E,38,[[["self"],["k12"]],[R[19],[R[76]]]]],[11,R[77],E,E,39,[[["self"],["k6"]],[R[19],[R[76]]]]],[11,R[77],E,E,40,[[["self"],["k5"]],[R[19],[R[76]]]]],[11,R[77],E,E,41,[[["self"],["k4"]],[R[19],[R[76]]]]],[11,R[77],E,E,42,[[["self"],["k3"]],[R[19],[R[76]]]]],[11,R[77],E,E,43,[[["self"],["k2"]],[R[19],[R[76]]]]],[11,R[77],R[45],E,10,[[["self"],[R[10]]],[R[19],[R[76]]]]],[11,"lt",E,E,10,[[["self"],[R[10]]],["bool"]]],[11,"le",E,E,10,[[["self"],[R[10]]],["bool"]]],[11,"gt",E,E,10,[[["self"],[R[10]]],["bool"]]],[11,"ge",E,E,10,[[["self"],[R[10]]],["bool"]]],[11,R[77],R[47],E,48,[[["self"],["lmer"]],[R[19],[R[76]]]]],[11,"lt",E,E,48,[[["self"],["lmer"]],["bool"]]],[11,"le",E,E,48,[[["self"],["lmer"]],["bool"]]],[11,"gt",E,E,48,[[["self"],["lmer"]],["bool"]]],[11,"ge",E,E,48,[[["self"],["lmer"]],["bool"]]],[11,R[77],R[0],E,0,[[["self"],[R[74]]],[R[19],[R[76]]]]],[11,"lt",E,E,0,[[["self"],[R[74]]],["bool"]]],[11,"le",E,E,0,[[["self"],[R[74]]],["bool"]]],[11,"gt",E,E,0,[[["self"],[R[74]]],["bool"]]],[11,"ge",E,E,0,[[["self"],[R[74]]],["bool"]]],[11,R[77],E,E,1,[[["self"],[R[75]]],[R[19],[R[76]]]]],[11,"lt",E,E,1,[[["self"],[R[75]]],["bool"]]],[11,"le",E,E,1,[[["self"],[R[75]]],["bool"]]],[11,"gt",E,E,1,[[["self"],[R[75]]],["bool"]]],[11,"ge",E,E,1,[[["self"],[R[75]]],["bool"]]],[11,R[77],E,E,2,[[["self"],["exts"]],[R[19],[R[76]]]]],[11,"lt",E,E,2,[[["self"],["exts"]],["bool"]]],[11,"le",E,E,2,[[["self"],["exts"]],["bool"]]],[11,"gt",E,E,2,[[["self"],["exts"]],["bool"]]],[11,"ge",E,E,2,[[["self"],["exts"]],["bool"]]],[11,"hash",R[44],E,4,N],[11,"hash",E,E,5,N],[11,"hash",E,E,32,N],[11,"hash",E,E,33,N],[11,"hash",E,E,34,N],[11,"hash",E,E,35,N],[11,"hash",E,E,36,N],[11,"hash",E,E,37,N],[11,"hash",E,E,38,N],[11,"hash",E,E,39,N],[11,"hash",E,E,40,N],[11,"hash",E,E,41,N],[11,"hash",E,E,42,N],[11,"hash",E,E,43,N],[11,"hash",R[45],E,10,N],[11,"hash",R[47],E,48,N],[11,"hash",R[0],E,2,N],[11,"fmt",R[44],E,4,[[["self"],[R[78]]],[R[32]]]],[11,"fmt",E,E,5,[[["self"],[R[78]]],[R[32]]]],[11,"fmt",E,E,32,[[["self"],[R[78]]],[R[32]]]],[11,"fmt",E,E,33,[[["self"],[R[78]]],[R[32]]]],[11,"fmt",E,E,34,[[["self"],[R[78]]],[R[32]]]],[11,"fmt",E,E,35,[[["self"],[R[78]]],[R[32]]]],[11,"fmt",E,E,36,[[["self"],[R[78]]],[R[32]]]],[11,"fmt",E,E,37,[[["self"],[R[78]]],[R[32]]]],[11,"fmt",E,E,38,[[["self"],[R[78]]],[R[32]]]],[11,"fmt",E,E,39,[[["self"],[R[78]]],[R[32]]]],[11,"fmt",E,E,40,[[["self"],[R[78]]],[R[32]]]],[11,"fmt",E,E,41,[[["self"],[R[78]]],[R[32]]]],[11,"fmt",E,E,42,[[["self"],[R[78]]],[R[32]]]],[11,"fmt",E,E,43,[[["self"],[R[78]]],[R[32]]]],[11,"fmt",R[45],E,10,[[["self"],[R[78]]],[R[32]]]],[11,"fmt",E,E,8,[[["self"],[R[78]]],[R[32]]]],[11,"fmt",E,E,9,[[["self"],[R[78]]],[R[32]]]],[11,"fmt",R[46],E,11,[[["self"],[R[78]]],[R[32]]]],[11,"fmt",E,E,12,[[["self"],[R[78]]],[R[32]]]],[11,"fmt",E,E,14,[[["self"],[R[78]]],[R[32]]]],[11,"fmt",R[47],E,48,[[["self"],[R[78]]],[R[32]]]],[11,"fmt",R[48],E,16,[[["self"],[R[78]]],[R[32]]]],[11,"fmt",R[0],E,0,[[["self"],[R[78]]],[R[32]]]],[11,"fmt",E,E,1,[[["self"],[R[78]]],[R[32]]]],[11,"fmt",E,E,3,[[["self"],[R[78]]],[R[32]]]],[11,"fmt",E,E,2,[[["self"],[R[78]]],[R[32]]]],[11,R[79],R[44],E,4,[[["self"],["__s"]],[R[32]]]],[11,R[79],E,E,5,[[["self"],["__s"]],[R[32]]]],[11,R[79],R[45],E,10,[[["self"],["__s"]],[R[32]]]],[11,R[79],E,E,9,[[["self"],["__s"]],[R[32]]]],[11,R[79],R[46],E,11,[[["self"],["__s"]],[R[32]]]],[11,R[79],E,E,12,[[["self"],["__s"]],[R[32]]]],[11,R[79],R[47],E,48,[[["self"],["__s"]],[R[32]]]],[11,R[79],R[0],E,3,[[["self"],["__s"]],[R[32]]]],[11,R[79],E,E,2,[[["self"],["__s"]],[R[32]]]],[11,R[80],R[44],E,4,[[["__d"]],[R[32]]]],[11,R[80],E,E,5,[[["__d"]],[R[32]]]],[11,R[80],R[45],E,10,[[["__d"]],[R[32]]]],[11,R[80],E,E,9,[[["__d"]],[R[32]]]],[11,R[80],R[46],E,11,[[["__d"]],[R[32]]]],[11,R[80],E,E,12,[[["__d"]],[R[32]]]],[11,R[80],R[47],E,48,[[["__d"]],[R[32]]]],[11,R[80],R[0],E,3,[[["__d"]],[R[32]]]],[11,R[80],E,E,2,[[["__d"]],[R[32]]]]],"p":[[3,R[81]],[3,R[82]],[3,"Exts"],[4,"Dir"],[3,"IntKmer"],[3,R[83]],[8,"IntHelp"],[8,R[84]],[3,R[85]],[3,R[86]],[3,R[87]],[3,R[88]],[3,R[89]],[3,R[90]],[3,"Node"],[8,"Array"],[3,R[91]],[8,R[92]],[3,R[93]],[3,R[94]],[3,R[95]],[8,R[96]],[3,R[97]],[3,R[98]],[3,R[99]],[8,"Mer"],[8,"Kmer"],[8,"MerImmut"],[8,"Vmer"],[3,"MerIter"],[3,"KmerIter"],[3,R[100]],[3,"K48"],[3,"K40"],[3,"K30"],[3,"K24"],[3,"K20"],[3,"K14"],[3,"K12"],[3,"K6"],[3,"K5"],[3,"K4"],[3,"K3"],[3,"K2"],[3,R[101]],[3,"NodeIter"],[3,R[102]],[3,R[103]],[3,"Lmer"]]};
initSearch(searchIndex);addSearchOptions(searchIndex);